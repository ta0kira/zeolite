/* -----------------------------------------------------------------------------
Copyright 2019-2021 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

define AutoIterator {
  fromRead (container) {
    return AutoReadIterator:fromRead<?>(container)
  }

  fromReadOffset (container,offset) {
    return AutoReadIterator:fromReadOffset<?>(container,offset)
  }

  fromWrite (container) {
    return AutoWriteIterator:fromWrite<?>(container)
  }

  fromWriteOffset (container,offset) {
    return AutoWriteIterator:fromWriteOffset<?>(container,offset)
  }

  fromReadWrite (container) {
    return AutoReadWriteIterator:fromReadWrite<?>(container)
  }

  fromReadWriteOffset (container,offset) {
    return AutoReadWriteIterator:fromReadWriteOffset<?>(container,offset)
  }
}

concrete AutoReadIterator<#x> {
  refines ReadIterator<#x>

  @category fromRead<#y> (ReadAt<#y>) -> (AutoReadIterator<#y>)
  @category fromReadOffset<#y> (ReadAt<#y>,Int) -> (AutoReadIterator<#y>)
}

define AutoReadIterator {
  @value ReadAt<#x> container
  @value Int position

  fromRead (container) {
    return fromReadOffset<#y>(container,0)
  }

  fromReadOffset (container,position) {
    Int position2 <- position
    if (position < 0) {
      position2 <- -1
    }
    if (position >= container.size() || container.size() == 0) {
      position2 <- container.size()
    }
    return AutoReadIterator<#y>{ container, position }
  }

  readCurrent () {
    if (pastForwardEnd() || pastReverseEnd()) {
      \ LazyStream<Formatted>.new()
          .append("Position ")
          .append(position)
          .append(" is out of bounds")
          .writeTo(SimpleOutput.error())
    }
    return container.readAt(position)
  }

  forward () {
    return fromReadOffset<#x>(container,position+1)
  }

  pastForwardEnd () {
    return position >= container.size()
  }

  reverse () {
    return fromReadOffset<#x>(container,position-1)
  }

  pastReverseEnd () {
    return position < 0 || container.size() == 0
  }
}

concrete AutoWriteIterator<#x> {
  refines WriteIterator<#x>

  @category fromWrite<#y> (WriteAt<#y>) -> (AutoWriteIterator<#y>)
  @category fromWriteOffset<#y> (WriteAt<#y>,Int) -> (AutoWriteIterator<#y>)
}

define AutoWriteIterator {
  @value WriteAt<#x> container
  @value Int position

  fromWrite (container) {
    return fromWriteOffset<#y>(container,0)
  }

  fromWriteOffset (container,position) {
    Int position2 <- position
    if (position < 0) {
      position2 <- -1
    }
    if (position >= container.size() || container.size() == 0) {
      position2 <- container.size()
    }
    return AutoWriteIterator<#y>{ container, position }
  }

  writeCurrent (x) {
    if (pastForwardEnd() || pastReverseEnd()) {
      \ LazyStream<Formatted>.new()
          .append("Position ")
          .append(position)
          .append(" is out of bounds")
          .writeTo(SimpleOutput.error())
    }
    \ container.writeAt(position,x)
    return self
  }

  forward () {
    return fromWriteOffset<#x>(container,position+1)
  }

  pastForwardEnd () {
    return position >= container.size()
  }

  reverse () {
    return fromWriteOffset<#x>(container,position-1)
  }

  pastReverseEnd () {
    return position < 0 || container.size() == 0
  }
}

concrete AutoReadWriteIterator<#x> {
  refines Iterator<#x>

  @category fromReadWrite<#y> ([ReadAt<#y>&WriteAt<#y>]) -> (AutoReadWriteIterator<#y>)
  @category fromReadWriteOffset<#y> ([ReadAt<#y>&WriteAt<#y>],Int) -> (AutoReadWriteIterator<#y>)
}

define AutoReadWriteIterator {
  @value [ReadAt<#x>&WriteAt<#x>] container
  @value Int position

  fromReadWrite (container) {
    return fromReadWriteOffset<#y>(container,0)
  }

  fromReadWriteOffset (container,position) {
    Int position2 <- position
    if (position < 0) {
      position2 <- -1
    }
    if (position >= container.size() || container.size() == 0) {
      position2 <- container.size()
    }
    return AutoReadWriteIterator<#y>{ container, position }
  }

  readCurrent () {
    if (pastForwardEnd() || pastReverseEnd()) {
      \ LazyStream<Formatted>.new()
          .append("Position ")
          .append(position)
          .append(" is out of bounds")
          .writeTo(SimpleOutput.error())
    }
    return container.readAt(position)
  }

  writeCurrent (x) {
    if (pastForwardEnd() || pastReverseEnd()) {
      \ LazyStream<Formatted>.new()
          .append("Position ")
          .append(position)
          .append(" is out of bounds")
          .writeTo(SimpleOutput.error())
    }
    \ container.writeAt(position,x)
    return self
  }

  forward () {
    return fromReadWriteOffset<#x>(container,position+1)
  }

  pastForwardEnd () {
    return position >= container.size()
  }

  reverse () {
    return fromReadWriteOffset<#x>(container,position-1)
  }

  pastReverseEnd () {
    return position < 0 || container.size() == 0
  }
}
