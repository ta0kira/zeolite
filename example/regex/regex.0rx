define MatchState {
  @value Int enum
  @value String name
  @category MatchState matchFailVal     <- MatchState{ 0, "matchFail" }
  @category MatchState matchContinueVal <- MatchState{ 1, "matchContinue" }
  @category MatchState matchCompleteVal <- MatchState{ 2, "matchComplete" }
  @category MatchState matchBranchVal   <- MatchState{ 3, "matchBranch" }

  formatted () {
    return "MatchState$" + name + "()"
  }

  equals (x,y) {
    return x.getEnum() == y.getEnum()
  }

  lessThan (x,y) {
    return x.getEnum() < y.getEnum()
  }

  matchFail () {
    return matchFailVal
  }

  matchContinue () {
    return matchContinueVal
  }

  matchComplete () {
    return matchCompleteVal
  }

  matchBranch () {
    return matchBranchVal
  }

  @value getEnum () -> (Int)
  getEnum () {
    return enum
  }
}

define MatchSingle {
  @value #c match
  @value MatchState state

  create (match) {
    return MatchSingle<#c>{ match, MatchState$matchContinue() }
  }

  copyWithReset () {
    return MatchSingle<#c>{ match, MatchState$matchContinue() }
  }

  matchesEmpty () {
    return false
  }

  tryNextMatch (data) (state2) {
    state2 <- MatchState$matchFail()
    if (MatchState$equals(state,MatchState$matchContinue())) {
      if (#c$equals(data,match)) {
        state2 <- MatchState$matchComplete()
      }
    }
    state <- state2
  }
}

define MatchRange {
  @value #c matchMin
  @value #c matchMax
  @value MatchState state

  create (matchMin,matchMax) {
    return MatchRange<#c>{ matchMin, matchMax, MatchState$matchContinue() }
  }

  copyWithReset () {
    return MatchRange<#c>{ matchMin, matchMax, MatchState$matchContinue() }
  }

  matchesEmpty () {
    return false
  }

  tryNextMatch (data) (state2) {
    state2 <- MatchState$matchFail()
    if (MatchState$equals(state,MatchState$matchContinue())) {
      if (!#c$lessThan(data,matchMin) && !#c$lessThan(matchMax,data)) {
        state2 <- MatchState$matchComplete()
      }
    }
    state <- state2
  }
}

define MatchAny {
  @value MatchState state

  create () {
    return MatchAny<#c>{ MatchState$matchContinue() }
  }

  copyWithReset () {
    return MatchAny<#c>{ MatchState$matchContinue() }
  }

  matchesEmpty () {
    return false
  }

  tryNextMatch (_) (state2) {
    state2 <- MatchState$matchFail()
    if (MatchState$equals(state,MatchState$matchContinue())) {
      state2 <- MatchState$matchComplete()
    }
    state <- state2
  }
}

define RepeatMatcher {
  @value Matcher<#c> matcher
  @value Int min
  @value Int max // 0 means unlimited.
  @value Int repetitionCount
  @value Bool failed

  createZeroPlus (matcher) {
    return createRange(0,0,matcher)
  }

  createOnePlus (matcher) {
    return createRange(1,0,matcher)
  }

  createRange (min,max,matcher) {
    return RepeatMatcher<#c>{ matcher, min, max, 0, false }
  }

  copyWithReset () {
    return RepeatMatcher<#c>{ matcher.copyWithReset(), min, max, 0, false }
  }

  matchesEmpty () {
    return reachedMin()
  }

  tryNextMatch (data) (state) {
    if (atMax() || failed) {
      return MatchState$matchFail()
    }
    state <- matcher.tryNextMatch(data)
    // matchContinue() is passed on.
    if (MatchState$equals(state,MatchState$matchComplete()) ||
        MatchState$equals(state,MatchState$matchBranch())) {
      ~ incrementMatch()
      ~ startRepeat()
      if (reachedMin()) {
        if (!atMax()) {
          state <- MatchState$matchBranch()
        } else {
          state <- MatchState$matchComplete()
        }
      } else {
        state <- MatchState$matchContinue()
      }
    } elif (MatchState$equals(state,MatchState$matchFail())) {
      failed <- true
    }
  }

  @value incrementMatch () -> ()
  incrementMatch () {
    repetitionCount <- repetitionCount+1
  }

  @value atMax () -> (Bool)
  atMax () {
    return max > 0 && repetitionCount >= max
  }

  @value reachedMin () -> (Bool)
  reachedMin () {
    return repetitionCount >= min
  }

  @value startRepeat () -> ()
  startRepeat () {
    matcher <- matcher.copyWithReset()
  }
}

define SequenceMatcher {
  @value optional ReadSequence<Matcher<#c>> matchers
  @value optional ReadSequence<Matcher<#c>> current
  @value optional SequenceMatcher<#c> branch
  @value Bool failed

  create (matchers) {
    return SequenceMatcher<#c>{ matchers, matchers, empty, false }
  }

  copyWithReset () {
    optional ReadSequence<Matcher<#c>> matchers2 <- copySequence(matchers)
    return SequenceMatcher<#c>{ matchers2, matchers2, empty, false }
  }

  matchesEmpty () {
    scoped {
      optional ReadSequence<Matcher<#c>> current2 <- current
    } in while (present(current2)) {
      if (!require(current2).value().matchesEmpty()) {
        return false
      }
    } update {
      current2 <- require(current2).next()
    }
    return true
  }

  tryNextMatch (data) (state) {
    branch <- empty
    if (!present(current) || failed) {
      failed <- true
      return MatchState$matchFail()
    }
    state <- MatchState$matchFail()
    while (!atEnd()) {
      // Skip over any matcher that fails but could have matched empty.
      Bool emptyAllowed <- require(current).value().matchesEmpty()
      state <- require(current).value().tryNextMatch(data)
      if (!MatchState$equals(state,MatchState$matchFail()) || !emptyAllowed) {
        break
      }
    } update {
      ~ startNext()
    }
    // matchContinue() is passed on.
    if (MatchState$equals(state,MatchState$matchBranch())) {
      optional ReadSequence<Matcher<#c>> matchers2 <- copySequence(require(current).next())
      if (present(matchers2)) {
        branch <- SequenceMatcher<#c>{ matchers2, matchers2, empty, false }
        state <- MatchState$matchContinue()
      } else {
        state <- MatchState$matchBranch()
      }
    } elif (MatchState$equals(state,MatchState$matchComplete())) {
      ~ startNext()
      if (atEnd()) {
        state <- MatchState$matchComplete()
      } else {
        state <- MatchState$matchContinue()
      }
    } elif (MatchState$equals(state,MatchState$matchFail())) {
      failed <- true
    }
  }

  getBranch () {
    return branch
  }

  @type copySequence
  (optional ReadSequence<Matcher<#c>>) -> (optional ReadSequence<Matcher<#c>>)
  copySequence (head) {
    if (!present(head)) {
      return empty
    } else {
      return LinkedNode<Matcher<#c>>$create(require(head).value().copyWithReset(),
                                            copySequence(require(head).next()))
    }
  }

  @value startNext () -> ()
  startNext () {
    if (present(current)) {
      current <- require(current).next()
    }
  }

  @value atEnd () -> (Bool)
  atEnd () {
    return !present(current)
  }
}

define BranchMatcher {
  @value BranchingMatcher<#c> matcher
  @value optional ReadSequence<BranchingMatcher<#c>> branches

  create (matcher) {
    ReadSequence<BranchingMatcher<#c>> branch <-
        LinkedNode<BranchingMatcher<#c>>$create(matcher,empty)
    return BranchMatcher<#c>{ matcher, branch }
  }

  copyWithReset () {
    return create(matcher.copyWithReset())
  }

  matchesEmpty () {
    scoped {
      optional ReadSequence<BranchingMatcher<#c>> current <- branches
    } in while (present(current)) {
      if (require(current).value().matchesEmpty()) {
        return true
      }
    } update {
      current <- require(current).next()
    }
    return false
  }

  tryNextMatch (data) (state) {
    state <- MatchState$matchFail()
    optional ReadSequence<BranchingMatcher<#c>> branches2 <- empty
    while (present(branches)) {
      BranchingMatcher<#c> branch <- require(branches).value()
      MatchState state2 <- branch.tryNextMatch(data)
      if (MatchState$equals(state2,MatchState$matchFail())) {
        continue
      }
      if (!MatchState$equals(state2,MatchState$matchFail())) {
        branches2 <- LinkedNode<BranchingMatcher<#c>>$create(branch,branches2)
      }
      optional BranchingMatcher<#c> branch2 <- branch.getBranch()
      if (present(branch2)) {
        branches2 <- LinkedNode<BranchingMatcher<#c>>$create(require(branch2),branches2)
      }
      if (MatchState$lessThan(state,state2)) {
        state <- state2
      }
    } update {
      branches <- require(branches).next()
    }
    branches <- branches2
  }
}

define LinkedNode {
  @value optional ReadSequence<#x> parent
  @value #x data

  create (data,parent) {
    return LinkedNode<#x>{ parent, data }
  }

  value () {
    return data
  }

  next () {
    return parent
  }
}
