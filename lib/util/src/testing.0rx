/* -----------------------------------------------------------------------------
Copyright 2023 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

define CheckErrorOr {
  $ReadOnlyExcept[]$

  refines ValueMatcher<ErrorOr<#x>>

  @value optional ValueMatcher<#x> valueMatcher
  @value optional ValueMatcher<String> errorMatcher

  value (valueMatcher) {
    return CheckErrorOr<#x>{ valueMatcher, empty }
  }

  error (errorMatcher) {
    return CheckErrorOr<any>{ empty, errorMatcher }
  }

  check (actual, report) {
    optional #x value <- empty
    if (`present` actual && !require(actual).isError()) {
      value <- require(actual).getValue()
    }
    optional String error <- empty
    if (`present` actual && require(actual).isError()) {
      error <- require(actual).getError().formatted()
    }
    MultiChecker checker <- MultiChecker.new(report)
    if (`present` valueMatcher) {
      \ checker.tryCheck(title: "value", value, require(valueMatcher))
    } elif (`present` value) {
      optional Formatted formattedValue <- reduce<#y, ErrorOr<Formatted>>(actual)&.getValue()
      if (`present` formattedValue) {
      \ report.newSection(title: "value")
          .addError(message: String.builder()
              .append("expected empty but got \"")
              .append(`require` formattedValue)
              .append("\"")
              .build())
      } else {
      \ report.newSection(title: "value")
          .addError(message: String.builder()
              .append("expected empty but got ")
              .append(typename<#y>())
              .build())
      }
    }
    if (`present` errorMatcher) {
      \ checker.tryCheck(title: "error", error, require(errorMatcher))
    } elif (`present` error) {
      \ report.newSection(title: "error")
          .addError(message: String.builder()
              .append("expected empty but got \"")
              .append(require(error).formatted())
              .append("\"")
              .build())
    }
  }

  summary () {
    if (present(valueMatcher)) {
      return String.builder()
          .append(typename<ErrorOr<#x>>())
          .append(" has matching value")
          .build()
    } else {
      return String.builder()
          .append(typename<ErrorOr<#x>>())
          .append(" has error")
          .build()
    }
  }
}
