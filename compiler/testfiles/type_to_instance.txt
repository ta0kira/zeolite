concrete Bool {}

// Comparable for equality.
interface Equals<x|> {
  x requires Equals<x>
  // eq takes (x) to (Bool)
}

// Comparable for less-than.
interface LessThan<x|> {
  x requires LessThan<x>
  // lt takes (x) to (Bool)
}

// Arbitrary key type.
interface AnyKey<k|> {
  refines Equals<k>
  k requires AnyKey<k>
}

// A key for a specific instance type.
interface Key<k|x> {
  refines AnyKey<k>
  k requires AnyKey<k>
}

// Identifier for an arbitrary Feature.
interface AnyFeatureId {
  refines AnyKey<AnyFeatureId>
  refines LessThan<AnyFeatureId>
}

// Identifier for a feature of a specific type.
concrete FeatureId<|x> {
  refines AnyFeatureId
  refines Key<AnyFeatureId,x>
}

/* Ideas for later ...

// Arbitrary value type.
interface AnyValue<|x> {
  any takes () to (x)
}

concrete Optional<|x> {
  present takes () to (Bool)
  get     takes () to (x)
}

concrete Value<k|x|> {
  refines AnyValue<x>

  new<y>
    // How does variance work here? Can x be covariant?
    y requires x
    takes (Key<k,y>,y)

  get<y>
    takes (Key<k,y>)
    to    (Optional<y>)
}

interface Supplier<|x> {
  get takes () to (x)
}

// Some feature.
interface Feature {}

concrete FeatureManager {
  enable<x>
    x requires Feature
    takes (FeatureId<x>,
           Supplier<x>)
    to    (x)
}

// Something this somewhere...
Map<AnyFeatureId,Value<AnyFeatureId,Feature>> features;
FeatureId<F1> f1_key;
features.put(f1_key,new Value(f1_key,new F1()));
F1 f1 = features.get(f1_key).get(f1_key);

*/
