/* -----------------------------------------------------------------------------
Copyright 2021 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

define LinkedNode { $FlatCleanup[next]$
  @value #x value
  @value weak #self prev
  @value optional #self next

  newNode (value) {
    return #self{ value, empty, empty }
  }

  get () {
    return value
  }

  set (value2) {
    value <- value2
    return self
  }

  builder () {
    return ListBuilder<#x,#self>.new()
  }

  next () {
    return next
  }

  prev () {
    return strong(prev)
  }

  duplicate () {
    $Hidden[prev,next,value]$
    scoped {
      optional #self head2, _ <- builder().appendAll(self).build()
    } in return require(head2)
  }

  setNext (next2) (old) {
    old <- next
    if (present(old)) {
      \ require(old).setPrevBase(empty)
    }
    next <- next2
    if (present(next2)) {
      \ require(next2).setPrev(empty)
      \ require(next2).setPrevBase(self)
    }
  }

  setPrev (prev2) (old) {
    old <- strong(prev)
    if (present(old)) {
      \ require(old).setNextBase(empty)
    }
    prev <- prev2
    if (present(prev2)) {
      \ require(prev2).setNext(empty)
      \ require(prev2).setNextBase(self)
    }
  }

  @value setNextBase (optional LinkedNode<#x>) -> ()
  setNextBase (next2) {
    next <- next2
  }

  @value setPrevBase (optional LinkedNode<#x>) -> ()
  setPrevBase (prev2) {
    prev <- prev2
  }
}

define ForwardNode { $FlatCleanup[next]$
  @value #x value
  @value optional #self next

  newNode (value) {
    return #self{ value, empty }
  }

  get () {
    return value
  }

  set (value2) {
    value <- value2
    return self
  }

  builder () {
    return ListBuilder<#x,#self>.new()
  }

  next () {
    return next
  }

  duplicate () {
    $Hidden[next,value]$
    scoped {
      optional #self head2, _ <- builder().appendAll(self).build()
    } in return require(head2)
  }

  setNext (next2) (old) {
    old <- next
    next <- next2
  }
}

define ListBuilder {
  @value optional #n head
  @value optional #n tail

  new () {
    return #self{ empty, empty }
  }

  append (value) {
    #n node <- #n.newNode(value)
    if (!present(head)) {
      head <- node
    } else {
      \ require(tail).setNext(node)
    }
    tail <- node
    return self
  }

  appendAll (values) {
    traverse (values -> #x value) {
      \ append(value)
    }
    return self
  }

  build () {
    return head, tail
  }
}
