/* -----------------------------------------------------------------------------
Copyright 2021 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

// Waits for a thread barrier.
@value interface BarrierWait {
  // Block until the barrier condition is satisfied.
  wait () -> (#self)
}

// Helper to create a thread barrier.
concrete EnumeratedBarrier {
  // Create a new barrier for a fixed number of threads.
  //
  // Args:
  // - Int: Non-negative number of threads.
  //
  // Returns:
  // - ReadAt<BarrierWait>: A list of the requested number of BarrierWait. These
  //   Should be passed out to the respective threads.
  //
  // Notes:
  // - All of the BarrierWait must be used; otherwise, the threads using the
  //   others will deadlock.
  // - All of the BarrierWait are identical. In fact, you could just use the
  //   first one for all threads. They are returned in ReadAt to help match the
  //   number of BarrierWait with the number of threads.
  @type new (Int) -> (ReadAt<BarrierWait>)
}
