/* -----------------------------------------------------------------------------
Copyright 2019-2021 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

testcase "iterate ReadIterator" {
  success
}

unittest forwardRead {
  String s <- "abcde"
  Int count <- 0
  scoped {
    ReadIterator<Char> iter <- AutoReadIterator:from<?>(s)
  } in while (!iter.pastForwardEnd()) {
    $ReadOnly[count,iter]$
    if (iter.readCurrent() != s.readAt(count)) {
      fail(iter.readCurrent())
    }
  } update {
    count <- count+1
    iter <- iter.forward()
  }
  if (count != s.size()) {
    fail(count)
  }
}

unittest reverseRead {
  String s <- "abcde"
  Int count <- s.size()-1
  scoped {
    ReadIterator<Char> iter <- AutoReadIterator:fromOffset<?>(s,count)
  } in while (!iter.pastReverseEnd()) {
    $ReadOnly[count,iter]$
    \ Testing.checkEquals<?>(iter.readCurrent(),s.readAt(count))
  } update {
    count <- count-1
    iter <- iter.reverse()
  }
  if (count != -1) {
    fail(count)
  }
}


testcase "iterate WriteIterator" {
  success
}

unittest forwardWrite {
  String s <- "abcde"
  Int count <- 0
  scoped {
    WriteChecker checker <- WriteChecker.create(s)
    WriteIterator<Char> iter <- AutoWriteIterator:from<?>(checker)
  } in while (!iter.pastForwardEnd()) {
    $ReadOnly[count,iter]$
    \ iter.writeCurrent(s.readAt(count))
  } update {
    count <- count+1
    iter <- iter.forward()
  }
  if (count != s.size()) {
    fail(count)
  }
}

unittest reverseWrite {
  String s <- "abcde"
  Int count <- s.size()-1
  scoped {
    WriteChecker checker <- WriteChecker.create(s)
    WriteIterator<Char> iter <- AutoWriteIterator:fromOffset<?>(checker,count)
  } in while (!iter.pastReverseEnd()) {
    $ReadOnly[count,iter]$
    \ iter.writeCurrent(s.readAt(count))
  } update {
    count <- count-1
    iter <- iter.reverse()
  }
  if (count != -1) {
    fail(count)
  }
}

concrete WriteChecker {
  refines WriteAt<Char>

  @type create (String) -> (WriteChecker)
}

define WriteChecker {
  @value String content

  create (string) {
    return WriteChecker{ string }
  }

  writeAt (index,c) {
    \ Testing.checkEquals<?>(c,content.readAt(index))
    return self
  }

  size () {
    return content.size()
  }
}


testcase "iterate Iterator" {
  success
}

unittest forwardReadWrite {
  String s <- "abcde"
  Int count <- 0
  scoped {
    ReadWriteChecker checker <- ReadWriteChecker.create(s)
    Iterator<Char> iter <- AutoIterator:from<?>(checker)
  } in while (!iter.pastForwardEnd()) {
    $ReadOnly[count,iter]$
    \ Testing.checkEquals<?>(iter.readCurrent(),s.readAt(count))
    \ iter.writeCurrent(iter.readCurrent())
  } update {
    count <- count+1
    iter <- iter.forward()
  }
  if (count != s.size()) {
    fail(count)
  }
}

unittest reverseReadWrite {
  String s <- "abcde"
  Int count <- s.size()-1
  scoped {
    ReadWriteChecker checker <- ReadWriteChecker.create(s)
    Iterator<Char> iter <- AutoIterator:fromOffset<?>(checker,count)
  } in while (!iter.pastReverseEnd()) {
    $ReadOnly[count,iter]$
    \ Testing.checkEquals<?>(iter.readCurrent(),s.readAt(count))
    \ iter.writeCurrent(iter.readCurrent())
  } update {
    count <- count-1
    iter <- iter.reverse()
  }
  if (count != -1) {
    fail(count)
  }
}

concrete ReadWriteChecker {
  refines ReadAt<Char>
  refines WriteAt<Char>

  @type create (String) -> (ReadWriteChecker)
}

define ReadWriteChecker {
  @value String content

  create (string) {
    return ReadWriteChecker{ string }
  }

  readAt (index) {
    return content.readAt(index)
  }

  writeAt (index,c) {
    \ Testing.checkEquals<?>(c,content.readAt(index))
    return self
  }

  size () {
    return content.size()
  }
}
