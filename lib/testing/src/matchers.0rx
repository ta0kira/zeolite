/* -----------------------------------------------------------------------------
Copyright 2023 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

define MultiChecker {
  $ReadOnlyExcept[]$

  @value TestReport report

  new (report) {
    return delegate -> #self
  }

  check (title,value,matcher) {
    if (delegate -> `executeMatch`) {
      return empty
    } else {
      return self
    }
  }

  tryCheck (title,value,matcher) {
    \ delegate -> `executeMatch`
    return self
  }

  @value executeMatch<#x> (Formatted title:,optional #x,ValueMatcher<#x>) -> (Bool)
  executeMatch (title,value,matcher) {
    String fullTitle <- String.builder()
        .append(title)
        .append(": ")
        .append(matcher.summary())
        .build()
    TestReport newReport <- report.newSection(title: fullTitle)
    $Hidden[report]$
    \ value `matcher.check` newReport
    return newReport.hasError()
  }
}

define CheckValue {
  using (expected) {
    return ValueTester<#x>.new(expected)
  }

  equals (expected) {
    return ValueEquals<#x>.new(false,expected)
  }

  notEquals (expected) {
    return ValueEquals<#x>.new(true,expected)
  }

  is (expected) {
    return ValueIdentifier<#x>.new(expected)
  }

  lessThanNotEqual (upper) {
    return ValueBounds<#x>.new(false,empty,upper)
  }

  greaterThanNotEqual (lower) {
    return ValueBounds<#x>.new(false,lower,empty)
  }

  betweenNotEqual (lower,upper) {
    return ValueBounds<#x>.new(false,lower,upper)
  }

  lessThanEqual (upper) {
    return ValueBounds<#x>.new(true,empty,upper)
  }

  greaterThanEqual (lower) {
    return ValueBounds<#x>.new(true,lower,empty)
  }

  betweenEqual (lower,upper) {
    return ValueBounds<#x>.new(true,lower,upper)
  }
}

define CheckString {
  $ReadOnlyExcept[]$

  refines ValueMatcher<String>

  @value String expected
  @value Bool fromStart
  @value Bool toEnd

  contains (expected) {
    return CheckString{ expected.formatted(), false, false }
  }

  startsWith (expected) {
    return CheckString{ expected.formatted(), true, false }
  }

  endsWith (expected) {
    return CheckString{ expected.formatted(), false, true }
  }

  check (actual,report) {
    if (! `present` actual) {
      \ report.addError(message: appendErrorAndBuild(String.builder().append("empty")))
      return _
    }
    String value <- require(actual)
    $Hidden[actual]$
    Int startIndex <- 0
    if (toEnd) {
      startIndex <- value.size()-expected.size()
    }
    while (startIndex >= 0 && startIndex+expected.size() <= value.size()) {
      Bool matches <- true
      scoped {
        Int index <- startIndex
        $Hidden[startIndex]$
      } in traverse (expected.defaultOrder() -> Char char) {
        $Hidden[expected]$
        if (value.readAt(index) != char) {
          matches <- false
          break
        }
      } update {
        index <- index+1
      }
      if (matches) {
        return _
      } elif (fromStart || toEnd) {
        break
      }
    } update {
      startIndex <- startIndex+1
    }
    \ report.addError(message: appendErrorAndBuild(String.builder().append(`Format:autoFormat` value)))
  }

  summary () {
    if (fromStart) {
      return "String starts with"
    } elif (toEnd) {
      return "String ends with"
    } else {
      return "String contains"
    }
  }

  @value appendErrorAndBuild ([Append<Formatted>&Build<String>]) -> (String)
  appendErrorAndBuild (output) {
    if (fromStart) {
      return output.append(" does not start with ").append(`Format:autoFormat` expected).build()
    } elif (toEnd) {
      return output.append(" does not end with ").append(`Format:autoFormat` expected).build()
    } else {
      return output.append(" does not contain ").append(`Format:autoFormat` expected).build()
    }
  }
}

define CheckSequence {
  equals (expected) {
    return SequenceEquals<#x>.new(false,expected)
  }

  equalsQuiet (expected) {
    return SequenceEquals<#x>.new(true,expected)
  }

  matches (expected) {
    return SequenceMatches<#x>.new(false,expected)
  }

  matchesQuiet (expected) {
    return SequenceMatches<#x>.new(true,expected)
  }

  allMatch (expected) {
    return SequenceAllMatch<#x>.new(false,expected)
  }

  allMatchQuiet (expected) {
    return SequenceAllMatch<#x>.new(true,expected)
  }
}

concrete ValueTester<#x> {
  #x requires TestCompare<#x>

  @type new (#x) -> (ValueMatcher<#x>)
}

define ValueTester {
  $ReadOnlyExcept[]$

  refines ValueMatcher<#x>

  @value #x expected

  new (expected) {
    return delegate -> #self
  }

  check (actual,report) {
    if (! `present` actual) {
      \ report.addError(message: "expected value but got empty")
    } else {
      \ expected.testCompare(actual: require(actual),report)
    }
  }

  summary () {
    return String.builder()
        .append("matches ")
        .append(typename<#x>())
        .build()
  }
}

concrete ValueEquals<#x> {
  #x requires Formatted
  #x defines Equals<#x>

  @type new (Bool,optional #x) -> (ValueMatcher<#x>)
}

define ValueEquals {
  $ReadOnlyExcept[]$

  refines ValueMatcher<#x>

  @value Bool invert
  @value optional #x expected

  new (invert,expected) {
    return delegate -> #self
  }

  check (actual,report) {
    Bool match <- defer
    if (`present` actual && `present` expected) {
      match <- require(actual) `#x.equals` require(expected)
    } else {
      match <- ! `present` actual && ! `present` expected
    }
    if (invert && match) {
      \ report.addError(message: String.builder()
          .append(`Format:autoFormat` actual)
          .append(" equals ")
          .append(`Format:autoFormat` expected)
          .build())
    } elif (!invert && !match) {
      \ report.addError(message: String.builder()
          .append(`Format:autoFormat` actual)
          .append(" does not equal ")
          .append(`Format:autoFormat` expected)
          .build())
    }
  }

  summary () {
    if (invert) {
      return "value not equals"
    } else {
      return "value equals"
    }
  }
}

concrete ValueIdentifier<#x> {
  @type new (optional #x) -> (ValueMatcher<#x>)
}

define ValueIdentifier {
  $ReadOnlyExcept[]$

  refines ValueMatcher<#x>

  // NOTE: Don't use #x here so that it doesn't create a reference.
  @value Identifier<#x> expected

  new (expected) {
    return #self{ `identify` expected }
  }

  check (actual,report) {
    if (`identify` actual != expected) {
      \ report.addError(message: String.builder()
          .append(`format` `identify` actual)
          .append(" does not equal ")
          .append(`format` expected)
          .build())
    }
  }

  summary () {
    return "value is same instance as"
  }

  @type format (Identifier<#x>) -> (Formatted)
  format (id) {
    return String.builder()
        .append(typename<#x>())
        .append("@")
        .append(id)
        .build()
  }
}

concrete ValueBounds<#x> {
  #x requires Formatted
  #x defines LessThan<#x>

  @type new (Bool,optional #x,optional #x) -> (ValueMatcher<#x>)
}

define ValueBounds {
  $ReadOnlyExcept[]$

  refines ValueMatcher<#x>

  @value Bool inclusive
  @value optional #x lower
  @value optional #x upper

  new (inclusive,lower,upper) {
    return delegate -> #self
  }

  check (actual,report) {
    Bool match <- `present` actual
    if (match && `present` lower) {
      match <- require(lower) `compare` require(actual)
    }
    if (match && `present` upper) {
      match <- require(actual) `compare` require(upper)
    }
    if (!match) {
      if (`present` lower && `present` upper) {
        \ report.addError(message: String.builder()
            .append(`Format:autoFormat` actual)
            .append(" is not between ")
            .append(`Format:autoFormat` lower)
            .append(" and ")
            .append(`Format:autoFormat` upper)
            .build())
      } elif (`present` lower) {
        \ report.addError(message: String.builder()
            .append(`Format:autoFormat` actual)
            .append(" is not greater than ")
            .append(`Format:autoFormat` lower)
            .build())
      } elif (`present` upper) {
        \ report.addError(message: String.builder()
            .append(`Format:autoFormat` actual)
            .append(" is not less than ")
            .append(`Format:autoFormat` upper)
            .build())
      }
    }
  }

  summary () {
    if (inclusive) {
      if (`present` lower && `present` upper) {
        return "value is between or equal"
      } elif (`present` lower) {
        return "value is greater than or equal"
      } elif (`present` upper) {
        return "value is less than or equal"
      } else {
        return "value is present"
      }
    } else {
      if (`present` lower && `present` upper) {
        return "value is between but not equal"
      } elif (`present` lower) {
        return "value is greater than but not equal"
      } elif (`present` upper) {
        return "value is less than but not equal"
      } else {
        return "value is present"
      }
    }
  }

  @value compare (#x,#x) -> (Bool)
  compare (x,y) {
    if (inclusive) {
      return !(y `#x.lessThan` x)
    } else {
      return x `#x.lessThan` y
    }
  }
}

concrete SequenceEquals<#x> {
  #x requires Formatted
  #x defines Equals<#x>

  @type new (Bool,DefaultOrder<#x>) -> (ValueMatcher<DefaultOrder<#x>>)
}

define SequenceEquals {
  $ReadOnlyExcept[]$

  refines ValueMatcher<DefaultOrder<#x>>

  @value Bool quiet
  @value DefaultOrder<#x> expected

  new (quiet,expected) {
    return delegate -> #self
  }

  check (actual,report) {
    if (quiet) {
      \ delegate -> `executeQuiet`
    } else {
      \ delegate -> `execute`
    }
  }

  summary () {
    return "sequence has equal values"
  }

  @value execute (optional DefaultOrder<#x>,TestReport) -> ()
  execute (actual,report) {
    optional Order<#x> currentActual   <- actual&.defaultOrder()
    optional Order<#x> currentExpected <- expected.defaultOrder()
    Int index <- 0
    $Hidden[actual,expected]$
    while (`present` currentActual || `present` currentExpected) {
      optional #x valueActual   <- currentActual&.get()
      optional #x valueExpected <- currentExpected&.get()
      TestReport newReport <- report.newSection(title: String.builder()
          .append("Item #")
          .append(index)
          .build())
      $Hidden[report]$
      if (! `present` valueActual) {
        \ newReport.addError(message: String.builder()
            .append(`Format:autoFormat` valueExpected)
            .append(" is missing")
            .build())
      } elif (! `present` valueExpected) {
        \ newReport.addError(message: String.builder()
            .append(`Format:autoFormat` valueActual)
            .append(" is unexpected")
            .build())
      } elif (!(require(valueActual) `#x.equals` require(valueExpected))) {
        \ newReport.addError(message: String.builder()
            .append(`Format:autoFormat` valueActual)
            .append(" does not equal ")
            .append(`Format:autoFormat` valueExpected)
            .build())
      }
    } update {
      currentActual <- currentActual&.next()
      currentExpected <- currentExpected&.next()
      index <- index+1
    }
  }

  @value executeQuiet (optional DefaultOrder<#x>,TestReport) -> ()
  executeQuiet (actual,report) {
    optional Order<#x> currentActual   <- actual&.defaultOrder()
    optional Order<#x> currentExpected <- expected.defaultOrder()
    Int index <- 0
    $Hidden[actual,expected]$
    while (`present` currentActual && `present` currentExpected) {
      #x valueActual   <- require(currentActual&.get())
      #x valueExpected <- require(currentExpected&.get())
      if (!(valueActual `#x.equals` valueExpected)) {
        TestReport newReport <- report.newSection(title: String.builder()
            .append("Item #")
            .append(index)
            .build())
        $Hidden[report]$
        \ newReport.addError(message: String.builder()
            .append(`Format:autoFormat` valueActual)
            .append(" does not equal ")
            .append(`Format:autoFormat` valueExpected)
            .build())
        break
      }
    } update {
      currentActual <- currentActual&.next()
      currentExpected <- currentExpected&.next()
      index <- index+1
    }
    if (`present` currentActual) {
      \ report.addError(message: "actual has extra items")
    }
    if (`present` currentExpected) {
      \ report.addError(message: "actual has missing items")
    }
  }
}

concrete SequenceMatches<#x> {
  #x requires Formatted

  @type new (Bool,DefaultOrder<ValueMatcher<#x>>) -> (ValueMatcher<DefaultOrder<#x>>)
}

define SequenceMatches {
  $ReadOnlyExcept[]$

  refines ValueMatcher<DefaultOrder<#x>>

  @value Bool quiet
  @value DefaultOrder<ValueMatcher<#x>> expected

  new (quiet,expected) {
    return delegate -> #self
  }

  check (actual,report) {
    if (quiet) {
      \ delegate -> `executeQuiet`
    } else {
      \ delegate -> `execute`
    }
  }

  summary () {
    return "sequence values separately match"
  }

  @value execute (optional DefaultOrder<#x>,TestReport) -> ()
  execute (actual,report) {
    optional Order<#x> currentActual <- actual&.defaultOrder()
    optional Order<ValueMatcher<#x>> currentExpected <- expected.defaultOrder()
    Int index <- 0
    $Hidden[actual,expected]$
    while (`present` currentActual || `present` currentExpected) {
      optional #x valueActual <- currentActual&.get()
      optional ValueMatcher<#x> valueExpected <- currentExpected&.get()
      TestReport newReport <- report.newSection(title: String.builder()
          .append("Item #")
          .append(index)
          .build())
      $Hidden[report]$
      if (! `present` valueActual) {
        \ newReport.addError(message: String.builder()
            .append(`Format:autoFormat` valueExpected&.summary())
            .append(" is missing")
            .build())
      } elif (! `present` valueExpected) {
        \ newReport.addError(message: String.builder()
            .append(`Format:autoFormat` valueActual)
            .append(" is unexpected")
            .build())
      } else {
        \ valueActual `require(valueExpected).check` newReport
      }
    } update {
      currentActual <- currentActual&.next()
      currentExpected <- currentExpected&.next()
      index <- index+1
    }
  }

  @value executeQuiet (optional DefaultOrder<#x>,TestReport) -> ()
  executeQuiet (actual,report) {
    optional Order<#x> currentActual <- actual&.defaultOrder()
    optional Order<ValueMatcher<#x>> currentExpected <- expected.defaultOrder()
    Int index <- 0
    $Hidden[actual,expected]$
    while (`present` currentActual && `present` currentExpected) {
      #x valueActual <- require(currentActual&.get())
      ValueMatcher<#x> valueExpected <- require(currentExpected&.get())
      TestReport newReport <- report.newSection(title: String.builder()
          .append("Item #")
          .append(index)
          .build())
      $Hidden[report]$
      \ valueActual `require(valueExpected).check` newReport
      if (newReport.hasError()) {
        break
      }
    } update {
      currentActual <- currentActual&.next()
      currentExpected <- currentExpected&.next()
      index <- index+1
    }
    if (`present` currentActual) {
      \ report.addError(message: "actual has extra items")
    }
    if (`present` currentExpected) {
      \ report.addError(message: "actual has missing items")
    }
  }
}

concrete SequenceAllMatch<#x> {
  #x requires Formatted

  @type new (Bool,ValueMatcher<#x>) -> (ValueMatcher<DefaultOrder<#x>>)
}

define SequenceAllMatch {
  $ReadOnlyExcept[]$

  refines ValueMatcher<DefaultOrder<#x>>

  @value Bool quiet
  @value ValueMatcher<#x> expected

  new (quiet,expected) {
    return delegate -> #self
  }

  check (actual,report) {
    scoped {
      Int index <- 0
    } in traverse (actual&.defaultOrder() -> #x value) {
      TestReport newReport <- report.newSection(title: String.builder()
          .append("Item #")
          .append(index)
          .build())
      $Hidden[report]$
      \ value `expected.check` newReport
      if (quiet && newReport.hasError()) {
        break
      }
    }
  }

  summary () {
    return "sequence values all match"
  }
}
