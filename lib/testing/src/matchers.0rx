/* -----------------------------------------------------------------------------
Copyright 2023 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

define MultiChecker {
  $ReadOnlyExcept[]$

  @value TestReport report

  new (report) {
    return delegate -> #self
  }

  check (title,value,matcher) {
    if (delegate -> `executeMatch`) {
      return empty
    } else {
      return self
    }
  }

  tryCheck (title,value,matcher) {
    \ delegate -> `executeMatch`
    return self
  }

  @value executeMatch<#x> (Formatted title:,optional #x,ValueMatcher<#x>) -> (Bool)
  executeMatch (title,value,matcher) {
    String fullTitle <- String.builder()
        .append(title)
        .append(": ")
        .append(matcher.summary())
        .build()
    TestReport newReport <- report.newSection(title: fullTitle)
    \ value `matcher.check` newReport
    return newReport.hasError()
  }
}

define CheckValue {
  from (expected) {
    return ValueTester<#x>.new(expected)
  }

  equals (expected) {
    return ValueEquals<#x>.new(false,expected)
  }

  notEquals (expected) {
    return ValueEquals<#x>.new(true,expected)
  }
}

concrete ValueTester<#x> {
  #x requires TestCompare<#x>

  @type new (#x) -> (ValueMatcher<#x>)
}

define ValueTester {
  $ReadOnlyExcept[]$

  refines ValueMatcher<#x>

  @value #x expected

  new (expected) {
    return delegate -> #self
  }

  check (actual,report) {
    if (! `present` actual) {
      \ report.addError(message: "expected value but got empty")
    } else {
      \ expected.testCompare(actual: require(actual),report)
    }
  }

  summary () {
    return String.builder()
        .append("matches ")
        .append(typename<#x>())
        .build()
  }
}

concrete ValueEquals<#x> {
  #x requires Formatted
  #x defines Equals<#x>

  @type new (Bool,optional #x) -> (ValueMatcher<#x>)
}

define ValueEquals {
  $ReadOnlyExcept[]$

  refines ValueMatcher<#x>

  @value Bool invert
  @value optional #x expected

  new (invert,expected) {
    return delegate -> #self
  }

  check (actual,report) {
    Bool match <- defer
    if (`present` actual && `present` expected) {
      match <- require(actual) `#x.equals` require(expected)
    } else {
      match <- ! `present` actual && ! `present` expected
    }
    if (invert && match) {
      \ report.addError(message: String.builder()
          .append(`autoFormat` actual)
          .append(" equals ")
          .append(`autoFormat` expected)
          .build())
    } elif (!invert && !match) {
      \ report.addError(message: String.builder()
          .append(`autoFormat` actual)
          .append(" does not equal ")
          .append(`autoFormat` expected)
          .build())
    }
  }

  summary () {
    if (invert) {
      return "value not equals"
    } else {
      return "value equals"
    }
  }

  @value autoFormat (optional #x) -> (Formatted)
  autoFormat (value) {
    if (`present` value) {
      return String.builder()
          .append("\"")
          .append(`require` value)
          .append("\"")
          .build()
    } else {
      return "empty"
    }
  }
}
