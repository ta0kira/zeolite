/* -----------------------------------------------------------------------------
Copyright 2023 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

testcase "CheckAlways" {
  success
}

unittest match {
  TestReportTree report <- TestReportTree.new("title",ValueList<Formatted>.new())
  \ report.addError(message: "message")
  \ CheckAlways:match().check(123,report)
  \ Testing.checkEquals(report.hasError(),false)
}

unittest fromWithoutError {
  TestReportTree report <- TestReportTree.new("title",ValueList<Formatted>.new())
  \ CheckAlways:error("message").check(123,report)
  \ Testing.checkEquals(report.hasError(),true)
}


testcase "CheckAlways:die" {
  failure
  require "something"
}

unittest test {
  TestReportTree report <- TestReportTree.new("title",ValueList<Formatted>.new())
  \ report.addError(message: "message")
  \ CheckAlways:die("something").check(123,report)
}


testcase "MultiChecker.check short cicuits" {
  failure
  require "title0"
  require "title2"
  require "message2"
  exclude "title1"
  exclude "title3"
  exclude "message3"
}

unittest test {
  TestReportTree report <- TestReportTree.new("title0",ValueList<Formatted>.new())

  \ MultiChecker.new(report)
      .check(title: "title1","foo",CheckAlways:match())
      &.check(title: "title2","foo",CheckAlways:error("message2"))
      &.check(title: "title3","foo",CheckAlways:error("message3"))

  IndentAppend output <- IndentAppend.new(String.builder())
  \ report.writeTo(output)
  \ TestHandler:failAndExit(output.build().formatted())
}


testcase "MultiChecker.tryCheck continues" {
  failure
  require "title0"
  require "title2"
  require "message2"
  require "title3"
  require "message3"
  exclude "title1"
}

unittest test {
  TestReportTree report <- TestReportTree.new("title0",ValueList<Formatted>.new())

  \ MultiChecker.new(report)
      .tryCheck<String>(title: "title1","foo",CheckAlways:match())
      .tryCheck<String>(title: "title2","foo",CheckAlways:error("message2"))
      .tryCheck<String>(title: "title3","foo",CheckAlways:error("message3"))

  IndentAppend output <- IndentAppend.new(String.builder())
  \ report.writeTo(output)
  \ TestHandler:failAndExit(output.build().formatted())
}


testcase "MultiChecker.check doesn't force pending errors" {
  failure
  require "title0"
  require "title1"
  require "message1"
  require "title3"
  require "message3"
  exclude "title2"
}

unittest test {
  TestReportTree report <- TestReportTree.new("title0",ValueList<Formatted>.new())

  \ MultiChecker.new(report)
      .tryCheck<String>(title: "title1","foo",CheckAlways:error("message1"))
      .check(title: "title2","foo",CheckAlways:match())
      &.tryCheck<String>(title: "title3","foo",CheckAlways:error("message3"))

  IndentAppend output <- IndentAppend.new(String.builder())
  \ report.writeTo(output)
  \ TestHandler:failAndExit(output.build().formatted())
}


testcase "CheckValue:equals success" {
  success TestChecker
}

unittest nonEmpty {
  \ "foo" `Matches:with` CheckValue:equals("foo")
}

unittest bothEmpty {
  \ empty?String `Matches:with` CheckValue:equals(empty?String)
}


testcase "CheckValue:equals failure not equal" {
  failure TestChecker
  require "foo"
  require "bar"
}

unittest test {
  \ "foo" `Matches:with` CheckValue:equals("bar")
}


testcase "CheckValue:equals failure left empty" {
  failure TestChecker
  require "empty"
  require "bar"
}

unittest test {
  \ empty?String `Matches:with` CheckValue:equals("bar")
}


testcase "CheckValue:equals failure right empty" {
  failure TestChecker
  require "foo"
  require "empty"
}

unittest test {
  \ "foo" `Matches:with` CheckValue:equals(empty?String)
}


testcase "CheckValue:notEquals success" {
  success TestChecker
}

unittest nonEmpty {
  \ "foo" `Matches:with` CheckValue:notEquals("bar")
}

unittest leftEmpty {
  \ empty?String `Matches:with` CheckValue:notEquals("bar")
}

unittest rightEmpty {
  \ "foo" `Matches:with` CheckValue:notEquals(empty?String)
}


testcase "CheckValue:notEquals failure non-empty" {
  failure TestChecker
  require "foo"
}

unittest test {
  \ "foo" `Matches:with` CheckValue:notEquals("foo")
}


testcase "CheckValue:notEquals failure empty" {
  failure TestChecker
  require "empty"
}

unittest test {
  \ empty?String `Matches:with` CheckValue:notEquals(empty?String)
}


testcase "CheckValue:is success" {
  success TestChecker
}

unittest test {
  String value <- "foo"
  \ value `Matches:with` CheckValue:is(value)
}


testcase "CheckValue:is failure same value" {
  failure TestChecker
  require "String@[a-f0-9]+"
  exclude "foo"
}

unittest test {
  \ "foo" `Matches:with` CheckValue:is("foo")
}


testcase "CheckValue:using success" {
  success TestChecker
}

unittest test {
  \ TestValue.default() `Matches:with` `CheckValue:using` TestValue.default()
}


testcase "CheckValue:using failure not equal" {
  failure TestChecker
  require "message1"
}

unittest test {
  \ TestValue.default() `Matches:with` `CheckValue:using` TestValue.new(123,"message1",empty)
}


testcase "CheckValue:using failure left empty" {
  failure TestChecker
  require "empty"
}

unittest test {
  \ empty?TestValue `Matches:with` `CheckValue:using` TestValue.new(123,"message1",empty)
}


testcase "CheckValue:lessThan success" {
  success TestChecker
}

unittest test {
  \ 0 `Matches:with` CheckValue:lessThan(1)
}


testcase "CheckValue:lessThan failure non-empty" {
  failure TestChecker
  require "100"
  require "20"
}

unittest test {
  \ 100 `Matches:with` CheckValue:lessThan(20)
}


testcase "CheckValue:lessThan failure empty" {
  failure TestChecker
  require "empty"
  require "20"
}

unittest test {
  \ empty?Int `Matches:with` CheckValue:lessThan(20)
}


testcase "CheckValue:greaterThan success" {
  success TestChecker
}

unittest test {
  \ 1 `Matches:with` CheckValue:greaterThan(0)
}


testcase "CheckValue:greaterThan failure non-empty" {
  failure TestChecker
  require "10"
  require "200"
}

unittest test {
  \ 10 `Matches:with` CheckValue:greaterThan(200)
}


testcase "CheckValue:greaterThan failure empty" {
  failure TestChecker
  require "empty"
  require "20"
}

unittest test {
  \ empty?Int `Matches:with` CheckValue:greaterThan(20)
}


testcase "CheckValue:between success" {
  success TestChecker
}

unittest test {
  \ 1 `Matches:with` CheckValue:between(0,3)
}


testcase "CheckValue:between failure below" {
  failure TestChecker
  require "3"
  require "5"
  require "200"
}

unittest test {
  \ 3 `Matches:with` CheckValue:between(5,200)
}


testcase "CheckValue:between failure above" {
  failure TestChecker
  require "300"
  require "5"
  require "200"
}

unittest test {
  \ 300 `Matches:with` CheckValue:between(5,200)
}


testcase "CheckValue:between failure empty" {
  failure TestChecker
  require "empty"
  require "5"
  require "200"
}

unittest test {
  \ empty?Int `Matches:with` CheckValue:between(5,200)
}


testcase "CheckString:contains success" {
  success TestChecker
}

unittest entireString {
  \ "1234567890" `Matches:with` CheckString:contains("1234567890")
}

unittest beginning {
  \ "1234567890" `Matches:with` CheckString:contains("12345")
}

unittest end {
  \ "1234567890" `Matches:with` CheckString:contains("67890")
}

unittest middle {
  \ "1234567890" `Matches:with` CheckString:contains("4567")
}


testcase "CheckString:contains failure empty" {
  failure TestChecker
  require "does not contain"
  require "empty"
}

unittest test {
  \ empty `Matches:with` CheckString:contains("567890")
}


testcase "CheckString:contains failure partial" {
  failure TestChecker
  require "does not contain"
  require "567890"
}

unittest test {
  \ "123456789" `Matches:with` CheckString:contains("567890")
}


testcase "CheckString:contains failure too long" {
  failure TestChecker
  require "does not contain"
  require "123"
}

unittest test {
  \ "123" `Matches:with` CheckString:contains("12345")
}


testcase "CheckString:startsWith success" {
  success TestChecker
}

unittest entireString {
  \ "1234567890" `Matches:with` CheckString:startsWith("1234567890")
}

unittest beginning {
  \ "1234567890" `Matches:with` CheckString:startsWith("12345")
}


testcase "CheckString:startsWith failure empty" {
  failure TestChecker
  require "does not start with"
  require "empty"
}

unittest test {
  \ empty `Matches:with` CheckString:startsWith("567890")
}


testcase "CheckString:startsWith failure not at start" {
  failure TestChecker
  require "does not start with"
  require "567890"
}

unittest test {
  \ "1234567890" `Matches:with` CheckString:startsWith("567890")
}


testcase "CheckString:startsWith failure too long" {
  failure TestChecker
  require "does not start with"
  require "123"
}

unittest test {
  \ "123" `Matches:with` CheckString:startsWith("12345")
}


testcase "CheckString:endsWith success" {
  success TestChecker
}

unittest entireString {
  \ "1234567890" `Matches:with` CheckString:endsWith("1234567890")
}

unittest end {
  \ "1234567890" `Matches:with` CheckString:endsWith("567890")
}


testcase "CheckString:endsWith failure empty" {
  failure TestChecker
  require "does not end with"
  require "empty"
}

unittest test {
  \ empty `Matches:with` CheckString:endsWith("567890")
}


testcase "CheckString:endsWith failure not at end" {
  failure TestChecker
  require "does not end with"
  require "123456"
}

unittest test {
  \ "1234567890" `Matches:with` CheckString:endsWith("123456")
}


testcase "CheckString:endsWith failure too long" {
  failure TestChecker
  require "does not end with"
  require "345"
}

unittest test {
  \ "345" `Matches:with` CheckString:endsWith("12345")
}


testcase "CheckSequence:equalsQuiet different" {
  failure TestChecker
  require "10.+40"
  exclude "20.+50"
  exclude "30.+60"
}

unittest test {
  Vector<Int> actual <- Vector<Int>.new().append(10).append(20).append(30)
  Vector<Int> expected <- Vector<Int>.new().append(40).append(50).append(60)
  \ actual `Matches:with` CheckSequence:equalsQuiet(expected)
}


testcase "CheckSequence:equalsQuiet extra" {
  failure TestChecker
  require "extra"
  exclude "missing"
  exclude "[Ii]tem #0"
  exclude "[Ii]tem #1"
  exclude "[Ii]tem #2"
  exclude "[Ii]tem #3"
}

unittest test {
  Vector<Int> actual <- Vector<Int>.new().append(10).append(20).append(30).append(40)
  Vector<Int> expected <- Vector<Int>.new().append(10).append(20).append(30)
  \ actual `Matches:with` CheckSequence:equalsQuiet(expected)
}


testcase "CheckSequence:equalsQuiet missing" {
  failure TestChecker
  require "missing"
  exclude "extra"
  exclude "[Ii]tem #0"
  exclude "[Ii]tem #1"
  exclude "[Ii]tem #2"
  exclude "[Ii]tem #3"
}

unittest test {
  Vector<Int> actual <- Vector<Int>.new().append(10).append(20).append(30)
  Vector<Int> expected <- Vector<Int>.new().append(10).append(20).append(30).append(40)
  \ actual `Matches:with` CheckSequence:equalsQuiet(expected)
}


testcase "CheckSequence matching success" {
  success TestChecker
}

unittest matches {
  Vector<Int> actual <- Vector<Int>.new().append(1).append(2).append(3)
  Vector<ValueMatcher<Int>> expected <- Vector<ValueMatcher<Int>>.new()
      .append(`CheckValue:equals` 1)
      .append(`CheckValue:equals` 2)
      .append(`CheckValue:equals` 3)
  \ actual `Matches:with` CheckSequence:matches(expected)
}

unittest matchesQuiet {
  Vector<Int> actual <- Vector<Int>.new().append(1).append(2).append(3)
  Vector<ValueMatcher<Int>> expected <- Vector<ValueMatcher<Int>>.new()
      .append(`CheckValue:equals` 1)
      .append(`CheckValue:equals` 2)
      .append(`CheckValue:equals` 3)
  \ actual `Matches:with` CheckSequence:matchesQuiet(expected)
}

unittest matchesWithEmpty {
  Vector<ValueMatcher<Int>> expected <- Vector<ValueMatcher<Int>>.new()
  \ empty `Matches:with` CheckSequence:matches(expected)
}

unittest matchesQuietWithEmpty {
  Vector<ValueMatcher<Int>> expected <- Vector<ValueMatcher<Int>>.new()
  \ empty `Matches:with` CheckSequence:matchesQuiet(expected)
}


testcase "CheckSequence:matches different" {
  failure TestChecker
  require "10.+40"
  require "20.+50"
  require "30.+60"
}

unittest test {
  Vector<Int> actual <- Vector<Int>.new().append(10).append(20).append(30)
  Vector<ValueMatcher<Int>> expected <- Vector<ValueMatcher<Int>>.new()
      .append(`CheckValue:equals` 40)
      .append(`CheckValue:equals` 50)
      .append(`CheckValue:equals` 60)
  \ actual `Matches:with` CheckSequence:matches(expected)
}


testcase "CheckSequence:matches extra" {
  failure TestChecker
  require "unexpected"
  require "[Ii]tem #3"
  exclude "[Ii]tem #0"
  exclude "[Ii]tem #1"
  exclude "[Ii]tem #2"
}

unittest test {
  Vector<Int> actual <- Vector<Int>.new().append(10).append(20).append(30).append(40)
  Vector<ValueMatcher<Int>> expected <- Vector<ValueMatcher<Int>>.new()
      .append(`CheckValue:equals` 10)
      .append(`CheckValue:equals` 20)
      .append(`CheckValue:equals` 30)
  \ actual `Matches:with` CheckSequence:matches(expected)
}


testcase "CheckSequence:matches missing" {
  failure TestChecker
  require "missing"
  require "[Ii]tem #3"
  exclude "[Ii]tem #0"
  exclude "[Ii]tem #1"
  exclude "[Ii]tem #2"
}

unittest test {
  Vector<Int> actual <- Vector<Int>.new().append(10).append(20).append(30)
  Vector<ValueMatcher<Int>> expected <- Vector<ValueMatcher<Int>>.new()
      .append(`CheckValue:equals` 10)
      .append(`CheckValue:equals` 20)
      .append(`CheckValue:equals` 30)
      .append(`CheckValue:equals` 40)
  \ actual `Matches:with` CheckSequence:matches(expected)
}


testcase "CheckSequence:matchesQuiet different" {
  failure TestChecker
  require "10.+40"
  exclude "20.+50"
  exclude "30.+60"
}

unittest test {
  Vector<Int> actual <- Vector<Int>.new().append(10).append(20).append(30)
  Vector<ValueMatcher<Int>> expected <- Vector<ValueMatcher<Int>>.new()
      .append(`CheckValue:equals` 40)
      .append(`CheckValue:equals` 50)
      .append(`CheckValue:equals` 60)
  \ actual `Matches:with` CheckSequence:matchesQuiet(expected)
}


testcase "CheckSequence:matchesQuiet extra" {
  failure TestChecker
  require "extra"
  exclude "missing"
  exclude "[Ii]tem #0"
  exclude "[Ii]tem #1"
  exclude "[Ii]tem #2"
  exclude "[Ii]tem #3"
}

unittest test {
  Vector<Int> actual <- Vector<Int>.new().append(10).append(20).append(30).append(40)
  Vector<ValueMatcher<Int>> expected <- Vector<ValueMatcher<Int>>.new()
      .append(`CheckValue:equals` 10)
      .append(`CheckValue:equals` 20)
      .append(`CheckValue:equals` 30)
  \ actual `Matches:with` CheckSequence:matchesQuiet(expected)
}


testcase "CheckSequence:matchesQuiet missing" {
  failure TestChecker
  require "missing"
  exclude "extra"
  exclude "[Ii]tem #0"
  exclude "[Ii]tem #1"
  exclude "[Ii]tem #2"
  exclude "[Ii]tem #3"
}

unittest test {
  Vector<Int> actual <- Vector<Int>.new().append(10).append(20).append(30)
  Vector<ValueMatcher<Int>> expected <- Vector<ValueMatcher<Int>>.new()
      .append(`CheckValue:equals` 10)
      .append(`CheckValue:equals` 20)
      .append(`CheckValue:equals` 30)
      .append(`CheckValue:equals` 40)
  \ actual `Matches:with` CheckSequence:matchesQuiet(expected)
}

