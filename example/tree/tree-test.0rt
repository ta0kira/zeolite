testcase "integration test" {
  success Test$execute()
}

concrete Test {
  @type execute () -> ()
}

define Test {
  execute () {
    // Just select the required usage patterns with an intersection.
    [KVWriter<Int,Int>&KVReader<Int,Int>] tree <- Tree<Int,Int>$new()
    Int count <- 30

    // Insert values.
    scoped {
      Int i <- 0
    } in while (i < count) {
      Int new <- ((i + 13) * 3547) % count
      ~ tree.set(new,i)
    } update {
      i <- i+1
    }

    // Verify and remove values.
    scoped {
      Int i <- 0
    } in while (i < count) {
      Int new <- ((i + 13) * 3547) % count
      scoped {
        optional Int value <- tree.get(new)
      } in if (!present(value)) {
        ~ LazyStream<Formatted>$new()
            .append("Not found ")
            .append(new)
            .append(" but should have been ")
            .append(i)
            .writeTo(SimpleOutput$error())
      } elif (require(value) != i) {
        ~ LazyStream<Formatted>$new()
            .append("Element ")
            .append(new)
            .append(" should have been ")
            .append(i)
            .append(" but was ")
            .append(require(value))
            .writeTo(SimpleOutput$error())
      }
      ~ tree.remove(new)
    } update {
      i <- i+1
    }
  }
}
