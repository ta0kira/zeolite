/* -----------------------------------------------------------------------------
Copyright 2023 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

define CheckSequence {
  using (expected) {
    return SequenceAdapter<#x>.new(expected)
  }

  equals (expected) {
    return SequenceEquals<#x>.new(expected)
  }

  matches (expected) {
    return SequenceMatches<#x>.new(expected)
  }

  allMatch (expected) {
    return SequenceAllMatch<#x>.new(expected)
  }
}

concrete SequenceAdapter<#x> {
  #x requires TestCompare<#x>

  @type new (DefaultOrder<#x>) -> (DefaultOrder<ValueMatcher<#x>>)
}

define SequenceAdapter {
  $ReadOnlyExcept[current]$

  refines DefaultOrder<ValueMatcher<#x>>
  refines Order<ValueMatcher<#x>>

  @value DefaultOrder<#x> original
  @value optional Order<#x> current

  new (original) {
    return #self{ original, empty }
  }

  defaultOrder () {
    return #self{ original, original.defaultOrder() }
  }

  get () {
    return CheckValue:using(`require` current&.get())
  }

  next () {
    if (`present` (current <- current&.next())) {
      return self
    } else {
      return empty
    }
  }
}

concrete SequenceEquals<#x> {
  #x requires Formatted
  #x defines Equals<#x>

  @type new (DefaultOrder<#x>) -> (ValueMatcher<DefaultOrder<#x>>)
}

define SequenceEquals {
  $ReadOnlyExcept[]$

  refines ValueMatcher<DefaultOrder<#x>>

  @value DefaultOrder<#x> expected

  new (expected) {
    return delegate -> #self
  }

  check (actual,report) {
    optional Order<#x> currentActual   <- actual&.defaultOrder()
    optional Order<#x> currentExpected <- expected.defaultOrder()
    Int index <- 0
    $Hidden[actual,expected]$
    while (`present` currentActual || `present` currentExpected) {
      optional #x valueActual   <- currentActual&.get()
      optional #x valueExpected <- currentExpected&.get()
      TestReport newReport <- report.newSection(title: String.builder()
          .append("Item #")
          .append(index)
          .build())
      $Hidden[report]$
      if (! `present` valueActual) {
        \ newReport.addError(message: String.builder()
            .append(`Format:autoFormat` valueExpected)
            .append(" is missing")
            .build())
      } elif (! `present` valueExpected) {
        \ newReport.addError(message: String.builder()
            .append(`Format:autoFormat` valueActual)
            .append(" is unexpected")
            .build())
      } elif (!(require(valueActual) `#x.equals` require(valueExpected))) {
        \ newReport.addError(message: String.builder()
            .append(`Format:autoFormat` valueActual)
            .append(" does not equal ")
            .append(`Format:autoFormat` valueExpected)
            .build())
      }
    } update {
      currentActual <- currentActual&.next()
      currentExpected <- currentExpected&.next()
      index <- index+1
    }
  }

  summary () {
    return "sequence has equal values"
  }
}

concrete SequenceMatches<#x> {
  @type new (DefaultOrder<ValueMatcher<#x>>) -> (ValueMatcher<DefaultOrder<#x>>)
}

define SequenceMatches {
  $ReadOnlyExcept[]$

  refines ValueMatcher<DefaultOrder<#x>>

  @value DefaultOrder<ValueMatcher<#x>> expected

  new (expected) {
    return delegate -> #self
  }

  check (actual,report) {
    optional Order<#x> currentActual <- actual&.defaultOrder()
    optional Order<ValueMatcher<#x>> currentExpected <- expected.defaultOrder()
    Int index <- 0
    $Hidden[actual,expected]$
    while (`present` currentActual || `present` currentExpected) {
      optional #x valueActual <- currentActual&.get()
      optional ValueMatcher<#x> valueExpected <- currentExpected&.get()
      TestReport newReport <- report.newSection(title: String.builder()
          .append("Item #")
          .append(index)
          .build())
      $Hidden[report]$
      if (! `present` valueActual) {
        \ newReport.addError(message: String.builder()
            .append("Item #")
            .append(index)
            .append(" is missing")
            .build())
      } elif (! `present` valueExpected) {
        \ newReport.addError(message: String.builder()
            .append("Item #")
            .append(index)
            .append(" is unexpected")
            .build())
      } else {
        \ valueActual `require(valueExpected).check` newReport
      }
    } update {
      currentActual <- currentActual&.next()
      currentExpected <- currentExpected&.next()
      index <- index+1
    }
  }

  summary () {
    return "sequence values separately match"
  }
}

concrete SequenceAllMatch<#x> {
  @type new (ValueMatcher<#x>) -> (ValueMatcher<DefaultOrder<#x>>)
}

define SequenceAllMatch {
  $ReadOnlyExcept[]$

  refines ValueMatcher<DefaultOrder<#x>>

  @value ValueMatcher<#x> expected

  new (expected) {
    return delegate -> #self
  }

  check (actual,report) {
    scoped {
      Int index <- 0
    } in traverse (actual&.defaultOrder() -> #x value) {
      TestReport newReport <- report.newSection(title: String.builder()
          .append("Item #")
          .append(index)
          .build())
      $Hidden[report]$
      \ value `expected.check` newReport
    }
  }

  summary () {
    return "sequence values all match"
  }
}
