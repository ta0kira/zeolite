/* -----------------------------------------------------------------------------
Copyright 2021 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

define Counter {
  $ReadOnly[limit,incr]$

  refines Order<Int>

  @value Int current
  @value optional Int limit
  @value Int incr

  zeroIndexed (max) {
    if (max <= 0) {
      return empty
    } else {
      return Counter{ 0, max, 1 }
    }
  }

  revZeroIndexed (max) {
    if (max <= 0) {
      return empty
    } else {
      return Counter{ max-1, -1, -1 }
    }
  }

  unlimited () {
    return Counter{ 0, empty, 1 }
  }

  next () {
    if (!present(limit) ||
        (incr < 0 && current+incr > require(limit)) ||
        (incr > 0 && current+incr < require(limit))) {
      current <- current+incr
      return self
    } else {
      return empty
    }
  }

  get () {
    return current
  }
}

define Repeat {
  $ReadOnly[limit,value]$

  refines Order<#x>

  @value #x value
  @value Int current
  @value optional Int limit

  times (value,max) {
    if (max <= 0) {
      return empty
    } else {
      return Repeat<#y>{ value, 0, max }
    }
  }

  unlimited (value) {
    return Repeat<#y>{ value, 0, empty }
  }

  next () {
    if (!present(limit) || current+1 < require(limit)) {
      current <- current+1
      return self
    } else {
      return empty
    }
  }

  get () {
    return value
  }
}

define Ranges {
  min (x,y) (z) {
    z, _ <- minMax<?>(x,y)
  }

  max (x,y) (z) {
    _, z <- minMax<?>(x,y)
  }

  minMax (x,y) {
    // NOTE: Using y < x makes the default x, y when they are equal.
    if (y `#x.lessThan` x) {
      return y, x
    } else {
      return x, y
    }
  }
}
