/* -----------------------------------------------------------------------------
Copyright 2021,2023 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

define LockRef {
  refines StateTransition<String,ReferenceState>

  new () { return #self{ } }

  runWith (name,state) {
    \ state.addOperation<#self>(name)
    if (state.tryLock()) {
      return empty
    } else {
      return self
    }
  }
}

define DecrRefIsZero {
  refines StatePredicate<String,ReferenceState>

  new () { return #self{ } }

  test (name,state) {
    \ state.addOperation<#self>(name)
    return state.remStrong() == 0
  }
}

define UnlockRef {
  refines StateTransition<String,ReferenceState>

  new () { return #self{ } }

  runWith (name,state) {
    \ state.addOperation<#self>(name)
    \ state.remLock()
    return empty
  }
}

define FreeObject {
  refines StateTransition<String,ReferenceState>

  new () { return #self{ } }

  runWith (name,state) {
    \ state.addOperation<#self>(name)
    \ state.kill()
    return empty
  }
}

define DecrWeakIsZero {
  refines StatePredicate<String,ReferenceState>

  new () { return #self{ } }

  test (name,state) {
    \ state.addOperation<#self>(name)
    return state.remWeak() == 0
  }
}

define FreeRef {
  refines StateTransition<String,ReferenceState>

  new () { return #self{ } }

  runWith (name,state) {
    \ state.addOperation<#self>(name)
    \ state.freeData()
    return empty
  }
}

define IncrRefIsOne {
  refines StatePredicate<String,ReferenceState>

  new () { return #self{ } }

  test (name,state) {
    \ state.addOperation<#self>(name)
    return state.addStrong() == 1
  }
}

define DecrRef {
  refines StateTransition<String,ReferenceState>

  new () { return #self{ } }

  runWith (name,state) {
    \ state.addOperation<#self>(name)
    \ state.remStrong()
    return empty
  }
}

define DecrWeak {
  refines StateTransition<String,ReferenceState>

  new () { return #self{ } }

  runWith (name,state) {
    \ state.addOperation<#self>(name)
    \ state.remWeak()
    return empty
  }
}

define PlusLockModLockZero {
  refines StatePredicate<String,ReferenceState>

  new () { return #self{ } }

  test (name,state) {
    \ state.addOperation<#self>(name)
    return state.plusStrong($ExprLookup[LOCK_VAL]$) % $ExprLookup[LOCK_VAL]$ == 0
  }
}

define MinusLockPlusOne {
  refines StateTransition<String,ReferenceState>

  new () { return #self{ } }

  runWith (name,state) {
    \ state.addOperation<#self>(name)
    \ state.minusStrong($ExprLookup[LOCK_VAL]$-1)
    return empty
  }
}

define MinusLock {
  refines StateTransition<String,ReferenceState>

  new () { return #self{ } }

  runWith (name,state) {
    \ state.addOperation<#self>(name)
    \ state.minusStrong($ExprLookup[LOCK_VAL]$)
    return empty
  }
}
