/* -----------------------------------------------------------------------------
Copyright 2023 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

define ZeoliteParsed {
  $ReadOnlyExcept[]$

  @value String label
  @value optional String content
  @value DefaultOrder<ZeoliteParsed> subsections

  leaf (label, content) {
    return #self{ label, content, AlwaysEmpty.default() }
  }

  section (label, subsections) {
    return #self{ label, empty, subsections }
  }

  testCompare (actual, report) {
    \ MultiChecker.new(report)
        .check(
            title: "label",
            actual.label(),
            CheckValue:equals(label))
        &.tryCheck(
            title: "content",
            actual.content(),
            CheckValue:equals(content))
        &.tryCheck(
            title: "subsections",
            actual.subsections(),
            CheckSequence:matches(CheckSequence:using(subsections)))
  }

  formatted () {
    [Append<Formatted> & Build<String>] builder <- String.builder()
        .append("ZeoliteParsed{label:")
        .append(label)
    if (`present` content) {
      \ builder
          .append(",content:\"")
          .append(CharType.escapeBreaks(`require` content))
          .append("\"")
    } else {
        traverse (subsections.defaultOrder() -> Formatted subsection) {
        \ builder
            .append(",")
            .append(subsection)
      }
    }
    \ builder.append("}")
    return builder.build()
  }

  formatWith (formatter) {
    if (`present` content) {
      return formatter.formatLeaf(label: label, value: `require` content)
    } else {
      [Append<#f> & Build<#f>] builder <- formatter.createSection(label: label)
      traverse (subsections.defaultOrder() -> ZeoliteParsed subsection) {
        \ builder.append(subsection.formatWith(formatter))
      }
      return builder.build()
    }
  }

  @value label () -> (String)
  label () {
    return label
  }

  @value content () -> (optional String)
  content () {
    return content
  }

  @value subsections () -> (DefaultOrder<ZeoliteParsed>)
  subsections () {
    return subsections
  }
}

define UseNamedTokenizer {
  $ReadOnlyExcept[]$

  refines Tokenizer<ZeoliteParseContext, ZeoliteParsed>

  @value String name

  new () {
    return #self{ #t.tokenizerName() }
  }

  tokenize (input, context) {
    return context.get(name)&.tokenize(input, context)
  }
}

define TokenAlternatives {
  $ReadOnlyExcept[]$

  @value Vector<Tokenizer<ZeoliteParseContext, ZeoliteParsed>> tokenizers

  new () {
    return #self{ Vector<Tokenizer<ZeoliteParseContext, ZeoliteParsed>>.new() }
  }

  append (tokenizer) {
    \ delegate -> `tokenizers.append`
    return self
  }

  tokenize (input, context) (token) {
    token <- empty
    traverse (tokenizers.defaultOrder() -> Tokenizer<ZeoliteParseContext, ZeoliteParsed> tokenizer) {
      token <- tokenizer.tokenize(input, context)
    } update {
      if (`present` token) {
        break
      }
    }
  }
}

define ZeoliteParseContext {
  $ReadOnlyExcept[]$

  @value TokenAlternatives defaultTokenizer
  @value HashedMap<String, Tokenizer<ZeoliteParseContext, ZeoliteParsed>> tokenizers

  new () {
    return #self{ TokenAlternatives.new(), HashedMap<String, Tokenizer<ZeoliteParseContext, ZeoliteParsed>>.new() }
  }

  defaultTokenizer () {
    return defaultTokenizer
  }

  include () {
    \ #t.tokenizerName() `tokenizers.set` #t.tokenizer()
    \ defaultTokenizer.append(UseNamedTokenizer.new<#t>())
    return self
  }

  get (k) {
    return delegate -> `tokenizers.get`
  }
}

define ZeoliteSymbol {
  $ReadOnlyExcept[]$

  @category SetReader<String> controlKeywords <- HashedSet<String>.new()
      .append("break")
      .append("cleanup")
      .append("continue")
      .append("defer")
      .append("delegate")
      .append("elif")
      .append("else")
      .append("if")
      .append("in")
      .append("return")
      .append("scoped")
      .append("traverse")
      .append("update")
      .append("while")

  @category SetReader<String> typeKeywords <- HashedSet<String>.new()
      .append("allows")
      .append("defines")
      .append("immutable")
      .append("refines")
      .append("requires")
      .append("visibility")

  @category SetReader<String> containKeywords <- HashedSet<String>.new()
      .append("concrete")
      .append("interface")
      .append("define")
      .append("testcase")

  @category SetReader<String> storageKeywords <- HashedSet<String>.new()
      .append("optional")
      .append("weak")

  @category SetReader<String> scopeQualifiers <- HashedSet<String>.new()
      .append("@category")
      .append("@type")
      .append("@value")
      .append("unittest")

  @category SetReader<String> testcaseKeywords <- HashedSet<String>.new()
      .append("args")
      .append("compiler")
      .append("compiles")
      .append("error")
      .append("exclude")
      .append("failure")
      .append("require")
      .append("stderr")
      .append("stdout")
      .append("success")
      .append("timeout")

  @category SetReader<String> builtinCategries <- HashedSet<String>.new()
      .append("all")
      .append("any")
      .append("Append")
      .append("AsBool")
      .append("AsChar")
      .append("AsFloat")
      .append("AsInt")
      .append("Bool")
      .append("Bounded")
      .append("Build")
      .append("Char")
      .append("CharBuffer")
      .append("Container")
      .append("Default")
      .append("Duplicate")
      .append("Equals")
      .append("Float")
      .append("Formatted")
      .append("Hashed")
      .append("Identifier")
      .append("Int")
      .append("LessThan")
      .append("Order")
      .append("Pointer")
      .append("ReadAt")
      .append("String")
      .append("SubSequence")
      .append("Testcase")
      .append("WriteAt")

  @category SetReader<String> builtinFunctions <- HashedSet<String>.new()
      .append("exit")
      .append("fail")
      .append("identify")
      .append("present")
      .append("reduce")
      .append("require")
      .append("strong")
      .append("typename")

  @category SetReader<String> builtinConstants <- HashedSet<String>.new()
      .append("_")
      .append("empty")
      .append("false")
      .append("true")
      .append("self")

  @category SetReader<String> builtinParams <- HashedSet<String>.new()
      .append("#self")

  @category SetReader<String> assignmentOperators <- HashedSet<String>.new()
      .append("<-")
      .append("<-|")

  @category SetReader<String> functionCallOperators <- HashedSet<String>.new()
      .append(".")
      .append("&.")
      .append("?")

  parseUpperSymbol (input) {
    \ input.reset()
    optional Char current <- input.current()
    if (! `present` current || !CharType.upper(`require` current)) {
      return empty
    }
    while (`present` current && CharType.alphaNum(`require` current)) {
      current <- input.forward().current()
    }
    return input
  }

  parseLowerSymbol (input) {
    \ input.reset()
    optional Char current <- input.current()
    if (! `present` current || !CharType.lower(`require` current)) {
      return empty
    }
    while (`present` current && CharType.alphaNum(`require` current)) {
      current <- input.forward().current()
    }
    return input
  }

  parseParamName (input) {
    \ input.reset()
    optional Char current <- input.current()
    if (! `present` current || `require` current != '#') {
      return empty
    }
    current <- input.forward().current()
    if (! `present` current || !CharType.lower(`require` current)) {
      return empty
    }
    while (`present` current && CharType.alphaNum(`require` current)) {
      current <- input.forward().current()
    }
    return input
  }

  parseScopeQualifier (input) {
    \ input.reset()
    optional Char current <- input.current()
    if (! `present` current || `require` current != '@') {
      return empty
    }
    current <- input.forward().current()
    while (`present` current && CharType.alphaNum(`require` current)) {
      current <- input.forward().current()
    }
    return input
  }

  parseOperatorSymbols (input) (output) {
    \ input.reset()
    output <- empty
    optional Char current <- input.current()
    while (`present` current && CharType.oneOf(`require` current, ".!%^&*-+|<>?")) {
      current <- input.forward().current()
      output <- input
    }
  }

  parseEscapedChar (input) {
    scoped {
      optional Char current <- input.current()
    } in if (! `present` current) {
      return empty
    } elif (`require` current == 'x') {
      // Hex escaped char.
      traverse (Counter.zeroIndexed(2) -> _) {
        current <- input.forward().current()
        if (! `present` current || !CharType.hexDigit(`require` current)) {
          return empty
        }
      }
      \ input.forward()
    } elif (CharType.octDigit(`require` current)) {
      // Oct escaped char.
      traverse (Counter.zeroIndexed(2) -> _) {
        current <- input.forward().current()
        if (! `present` current || !CharType.octDigit(`require` current)) {
          return empty
        }
      }
      \ input.forward()
    } elif (`require` current `CharType.oneOf` "'\"?\\abfnrtv") {
      // Single escaped char.
      \ input.forward()
    } else {
      // Invalid escaped char.
      \ input.forward()
      return empty
    }
    return input
  }

  tryControlKeyword (value) (type) {
    type <- empty
    if (`controlKeywords.member` value) {
      type <- "ZeoliteControlKeyword"
    }
  }

  tryTypeKeyword (value) (type) {
    type <- empty
    if (`typeKeywords.member` value) {
      type <- "ZeoliteTypeKeyword"
    }
  }

  tryContainKeyword (value) (type) {
    type <- empty
    if (`containKeywords.member` value) {
      type <- "ZeoliteContainKeyword"
    }
  }

  tryStorageKeyword (value) (type) {
    type <- empty
    if (`storageKeywords.member` value) {
      type <- "ZeoliteStorageKeyword"
    }
  }

  tryScopeQualifier (value) (type) {
    type <- empty
    if (`scopeQualifiers.member` value) {
      type <- "ZeoliteScopeQualifier"
    }
  }

  tryTestcaseKeyword (value) (type) {
    type <- empty
    if (`testcaseKeywords.member` value) {
      type <- "ZeoliteTestcaseKeyword"
    }
  }

  tryBuiltinCategory (value) (type) {
    type <- empty
    if (`builtinCategries.member` value) {
      type <- "ZeoliteBuiltinCategory"
    }
  }

  tryBuiltinFunction (value) (type) {
    type <- empty
    if (`builtinFunctions.member` value) {
      type <- "ZeoliteBuiltinFunction"
    }
  }

  tryBuiltinConstant (value) (type) {
    type <- empty
    if (`builtinConstants.member` value) {
      type <- "ZeoliteBuiltinConstant"
    }
  }

  tryAssignment (value) (type) {
    type <- empty
    if (`assignmentOperators.member` value) {
      type <- "ZeoliteAssignment"
    }
  }

  tryBuiltinParam (value) (type) {
    type <- empty
    if (`builtinParams.member` value) {
      type <- "ZeoliteBuiltinParam"
    }
  }

  tryFunctionCall (value) (type) {
    type <- empty
    if (`functionCallOperators.member` value) {
      type <- "ZeoliteFunctionCall"
    }
  }
}
