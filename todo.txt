Roughly in order of execution:

- Compile implementations, e.g., type-check and resolve symbols.
- Output implementations.

- Rewrite and test C++ base.

- Integration tests for full compilation.

- Implement module system in compiler.
- Create modules for "standard library" stuff, e.g., Queue.
- Streamline compilation process.
- Streamline compiler installation.


Supported in implementation, roughly in order of simplicity+importance:

- inference of expression type
- bool/string/int literals
- bool/string/int expressions
- optional
- skip/present/require
- weak/strong

- category function calls

- internal type variables (value only)
- no access to internal variables if they have variance
- no access to internal types if any constraint uses a variant param

- reduce, e.g., reduce<x,y>(value)
