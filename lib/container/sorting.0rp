/* -----------------------------------------------------------------------------
Copyright 2021 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

// Sorting of sequences of values.
concrete Sorting {
  // In-place unstable sorting of a random-access container.
  //
  // Params:
  // - #x: Element type managed by the container.
  //
  // Notes:
  // - Worst-case performance is O(n log n).
  // - Worst-case storage is O(1).
  @category sort<#x>
    #x defines LessThan<#x>
  ([ReadAt<#x>&WriteAt<#x>]) -> ()

  // In-place unstable sorting of a random-access container.
  //
  // Params:
  // - #x: Element type managed by the container.
  // - #y: Comparator type providing the LessThan<#x> comparison.
  //
  // Notes:
  // - Worst-case performance is O(n log n).
  // - Worst-case storage is O(1).
  //
  // Example:
  //
  //   // Sort myIntContainer in reverse order. (Reversed is from lib/util.)
  //   \ Sorting:sortWith<?,Reversed<Int>>(myIntContainer)
  @category sortWith<#x,#y>
    #y defines LessThan<#x>
  ([ReadAt<#x>&WriteAt<#x>]) -> ()

  // In-place order reversal of a random-access container.
  @category reverse<#x> ([ReadAt<#x>&WriteAt<#x>]) -> ()
}
