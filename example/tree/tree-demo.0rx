concrete TreeDemo {
  @type run () -> ()
}

define TreeDemo {
  run () {
    ~ testTree()
    ~ demoTypeTree()
  }

  @category demoTypeTree () -> ()
  demoTypeTree () {
    TypeTree tree <- TypeTree$new()

    TypeKey<Int>    keyInt    <- TypeKey<Int>$new()
    TypeKey<String> keyString <- TypeKey<String>$new()
    TypeKey<Float>  keyFloat  <- TypeKey<Float>$new()
    TypeKey<Value>  keyValue  <- TypeKey<Value>$new()

    ~ tree.set<Int>(keyInt,1)
    ~ tree.set<String>(keyString,"a")

    ~ check<Int>(tree,keyInt)
    ~ check<String>(tree,keyString)
    ~ check<Float>(tree,keyFloat)  // Not found, since we never added a value.

    ~ tree.set<Value>(keyValue,Value$new())
    ~ check<Value>(tree,keyValue)
  }

  @category check<#x>
    #x requires Formatted
  (TypeTree,TypeKey<#x>) -> ()
  check (tree,key) {
    scoped {
      optional #x value <- tree.get<#x>(key)
    } in if (present(value)) {
      ~ LazyStream<Formatted>$new()
          .append("Found '")
          .append(require(value))
          .append("'\n")
          .writeTo(SimpleOutput$stderr())
    } else {
      ~ LazyStream<Formatted>$new()
          .append(typename<TypeKey<#x>>())
          .append(" Not Found\n")
          .writeTo(SimpleOutput$stderr())
    }
  }

  @category testTree () -> ()
  testTree () {
    // Just select the required usage patterns with an intersection.
    [KVWriter<Int,Int>&KVReader<Int,Int>] tree <- Tree<Int,Int>$new()
    Int count <- 30

    // Insert values.
    scoped {
      Int i <- 0
    } in while (i < count) {
      Int new <- ((i + 13) * 3547) % count
      ~ LazyStream<Formatted>$new()
          .append("Inserting ")
          .append(i)
          .append(" at ")
          .append(new)
          .append("\n")
          .writeTo(SimpleOutput$stderr())
      ~ tree.set(new,i)
    } update {
      i <- i+1
    }

    // Verify and remove values.
    scoped {
      Int i <- 0
    } in while (i < count) {
      Int new <- ((i + 13) * 3547) % count
      scoped {
        optional Int value <- tree.get(new)
      } in if (!present(value)) {
        ~ LazyStream<Formatted>$new()
            .append("Not found ")
            .append(new)
            .append(" but should have been ")
            .append(i)
            .writeTo(SimpleOutput$error())
      } elif (require(value) != i) {
        ~ LazyStream<Formatted>$new()
            .append("Element ")
            .append(new)
            .append(" should have been ")
            .append(i)
            .append(" but was ")
            .append(require(value))
            .writeTo(SimpleOutput$error())
      } else {
        ~ LazyStream<Formatted>$new()
            .append("Element ")
            .append(new)
            .append(" is ")
            .append(i)
            .append("\n")
            .writeTo(SimpleOutput$stderr())
      }
      ~ tree.remove(new)
    } update {
      i <- i+1
    }
  }
}

concrete Value {
  refines Formatted
  @type new () -> (Value)
}

define Value {
  new () { return Value{} }
  formatted () { return "Value" }
}
