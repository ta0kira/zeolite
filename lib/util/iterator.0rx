/* -----------------------------------------------------------------------------
Copyright 2019-2021 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

define ReadIterator {
  @value ReadPosition<#x> reader
  @value Int position

  fromReadPosition (reader) {
    return fromReadPositionAt<#y>(reader,0)
  }

  fromReadPositionAt (reader,position) {
    Int position2 <- position
    if (position < 0) {
      position2 <- -1
    }
    if (position >= reader.readSize() || reader.readSize() == 0) {
      position2 <- reader.readSize()
    }
    return ReadIterator<#y>{ reader, position }
  }

  readCurrent () {
    if (pastForwardEnd() || pastReverseEnd()) {
      \ LazyStream<Formatted>.new()
          .append("Position ")
          .append(position)
          .append(" is out of bounds")
          .writeTo(SimpleOutput.error())
    }
    return reader.readPosition(position)
  }

  forward () {
    return fromReadPositionAt<#x>(reader,position+1)
  }

  pastForwardEnd () {
    return position >= reader.readSize()
  }

  reverse () {
    return fromReadPositionAt<#x>(reader,position-1)
  }

  pastReverseEnd () {
    return position < 0 || reader.readSize() == 0
  }
}
