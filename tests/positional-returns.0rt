/* -----------------------------------------------------------------------------
Copyright 2020 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

testcase "missing return" {
  error
  require "Value"
}

@value interface Value {}

define Test {
  @value process () -> (Value)
  process () {}

  run () {}
}

concrete Test {
  @type run () -> ()
}


testcase "positional return with no names assigned" {
  success
}

unittest test {
  \ Test.run()
}

define Test {
  @type get () -> (Int,Int)
  get () (x,y) {
    if (false) {
      x <- 1
    } else {
      return 3, 4
    }
    y <- 2
  }

  run () {
    scoped {
      Int x, Int y <- get()
    } in if (x != 3) {
      fail("Failed")
    } elif (y != 4) {
      fail("Failed")
    }
  }
}

concrete Test {
  @type run () -> ()
}


testcase "positional return instead of names" {
  success
}

unittest test {
  \ Test.run()
}

define Test {
  @type get () -> (Int,Int)
  get () (x,y) {
    return 1, 2
  }

  run () {
    scoped {
      Int x, Int y <- get()
    } in if (x != 1) {
      fail("Failed")
    } elif (y != 2) {
      fail("Failed")
    }
  }
}

concrete Test {
  @type run () -> ()
}


testcase "positional return with some names assigned" {
  success
}

unittest test {
  \ Test.run()
}

define Test {
  @type get () -> (Int,Int)
  get () (x,y) {
    y <- 2
    if (false) {
      x <- 1
    } else {
      return 3, 4
    }
  }

  run () {
    scoped {
      Int x, Int y <- get()
    } in if (x != 3) {
      fail("Failed")
    } elif (y != 4) {
      fail("Failed")
    }
  }
}

concrete Test {
  @type run () -> ()
}
