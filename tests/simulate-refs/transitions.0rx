/* -----------------------------------------------------------------------------
Copyright 2021 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

define LockRef {
  refines ReferenceMachine

  new () { return #self{ } }

  runWith (name,state) {
    \ state.addOperation<#self>(name)
    if (state.tryLock()) {
      return empty
    } else {
      return self
    }
  }
}

define IfElseDecrRefIsZero {
  refines ReferenceMachine

  @value optional ReferenceMachine doIf
  @value optional ReferenceMachine doElse

  new (doIf,doElse) { return #self{ doIf, doElse } }

  runWith (name,state) {
    \ state.addOperation<#self>(name)
    if (state.remStrong() == 0) {
      return doIf
    } else {
      return doElse
    }
  }
}

define UnlockRef {
  refines ReferenceMachine

  new () { return #self{ } }

  runWith (name,state) {
    \ state.addOperation<#self>(name)
    \ state.remLock()
    return empty
  }
}

define FreeObject {
  refines ReferenceMachine

  new () { return #self{ } }

  runWith (name,state) {
    \ state.addOperation<#self>(name)
    \ state.kill()
    return empty
  }
}

define IfElseDecrWeakIsZero {
  refines ReferenceMachine

  @value optional ReferenceMachine doIf
  @value optional ReferenceMachine doElse

  new (doIf,doElse) { return #self{ doIf, doElse } }

  runWith (name,state) {
    \ state.addOperation<#self>(name)
    if (state.remWeak() == 0) {
      return doIf
    } else {
      return doElse
    }
  }
}

define FreeRef {
  refines ReferenceMachine

  new () { return #self{ } }

  runWith (name,state) {
    \ state.addOperation<#self>(name)
    \ state.freeData()
    return empty
  }
}

define IfElseIncrRefIsOne {
  refines ReferenceMachine

  @value optional ReferenceMachine doIf
  @value optional ReferenceMachine doElse

  new (doIf,doElse) { return #self{ doIf, doElse } }

  runWith (name,state) {
    \ state.addOperation<#self>(name)
    if (state.addStrong() == 1) {
      return doIf
    } else {
      return doElse
    }
  }
}

define DecrRef {
  refines ReferenceMachine

  new () { return #self{ } }

  runWith (name,state) {
    \ state.addOperation<#self>(name)
    \ state.remStrong()
    return empty
  }
}

define DecrWeak {
  refines ReferenceMachine

  new () { return #self{ } }

  runWith (name,state) {
    \ state.addOperation<#self>(name)
    \ state.remWeak()
    return empty
  }
}

define IfElsePlusLockModLockZero {
  refines ReferenceMachine

  @value optional ReferenceMachine doIf
  @value optional ReferenceMachine doElse

  new (doIf,doElse) { return #self{ doIf, doElse } }

  runWith (name,state) {
    \ state.addOperation<#self>(name)
    if (state.plusStrong($ExprLookup[LOCK_VAL]$) % $ExprLookup[LOCK_VAL]$ == 0) {
      return doIf
    } else {
      return doElse
    }
  }
}

define MinusLockPlusOne {
  refines ReferenceMachine

  new () { return #self{ } }

  runWith (name,state) {
    \ state.addOperation<#self>(name)
    \ state.minusStrong($ExprLookup[LOCK_VAL]$-1)
    return empty
  }
}

define MinusLock {
  refines ReferenceMachine

  new () { return #self{ } }

  runWith (name,state) {
    \ state.addOperation<#self>(name)
    \ state.minusStrong($ExprLookup[LOCK_VAL]$)
    return empty
  }
}
