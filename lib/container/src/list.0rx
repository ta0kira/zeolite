/* -----------------------------------------------------------------------------
Copyright 2021 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

define LinkedNode {
  @value #x value
  @value optional #self prev
  @value optional #self next

  new (value) {
    return #self{ value, empty, empty }
  }

  get () {
    return value
  }

  set (value2) {
    value <- value2
    return self
  }

  builder () {
    return ListBuilder<#x>.new()
  }

  next () {
    return next
  }

  prev () {
    return prev
  }

  duplicate () {
    $Hidden[prev,next,value]$
    ListBuilder<#x> builder <- #self.builder()
    traverse (self -> #x value2) {
      \ builder.append(value2)
    }
    scoped {
      optional #self head, _ <- builder.build()
    } in return require(head)
  }

  setNext (next2) (old) {
    old <- next
    $Hidden[old]$
    if (present(next)) {
      \ require(next).setPrevBase(empty)
    }
    next <- next2
    if (present(next)) {
      \ require(next).setPrev(empty)
      \ require(next).setPrevBase(self)
    }
  }

  setPrev (prev2) (old) {
    old <- prev
    $Hidden[old]$
    if (present(prev)) {
      \ require(prev).setNextBase(empty)
    }
    prev <- prev2
    if (present(prev)) {
      \ require(prev).setNext(empty)
      \ require(prev).setNextBase(self)
    }
  }

  @value setNextBase (optional LinkedNode<#x>) -> ()
  setNextBase (next2) {
    next <- next2
  }

  @value setPrevBase (optional LinkedNode<#x>) -> ()
  setPrevBase (prev2) {
    prev <- prev2
  }
}

define ListBuilder {
  @value optional LinkedNode<#x> head
  @value optional LinkedNode<#x> tail

  new () {
    return #self{ empty, empty }
  }

  append (value) {
    LinkedNode<#x> node <- LinkedNode<#x>.new(value)
    if (!present(head)) {
      head <- node
    } else {
      \ require(tail).setNext(node)
    }
    tail <- node
    return self
  }

  build () {
    return head, tail
  }
}
