/* -----------------------------------------------------------------------------
Copyright 2021 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

// Generates values of type #x.
@value interface Generator<|#x> {
  generate () -> (#x)
}

// Generates exponentially-distributed Float values.
concrete RandomExponential {
  refines Generator<Float>

  // Creates a new generator with the specified lambda value.
  @type new (Float) -> (#self)

  // Resets the seed for RNG.
  @value setSeed (Int) -> (#self)
}

// Generates Gaussian-distributed Float values.
concrete RandomGaussian {
  refines Generator<Float>

  // Creates a new generator with the specified mean and standard deviation.
  @type new (Float, Float) -> (#self)

  // Resets the seed for RNG.
  @value setSeed (Int) -> (#self)
}

// Generates uniformly-distributed Float values.
concrete RandomUniform {
  refines Generator<Float>

  // Creates a new generator with the specified min and max values.
  @type new (Float, Float) -> (#self)

  // Creates a new generator for the range [0.0, 1.0).
  @type probability () -> (#self)

  // Resets the seed for RNG.
  @value setSeed (Int) -> (#self)
}

// Always returns a constant value.
concrete GenerateConstant {
  refines Generator<Float>

  // Creates a new generator with the specified constant values.
  @type new (Float) -> (#self)
}

// Generates values of the provided type.
concrete RandomCategorical<|#c> {
  refines Generator<#c>

  // Creates a generator for the provided distribution.
  //
  // Notes:
  // - The Generator<Float> *must* return values in the range [0, 1).
  // - The distribution is not copied; therefore, changes to the distribution
  //   will affect the returned generator.
  @category sampleWith<#c> (CategoricalReader<#c>, Generator<Float>) -> (RandomCategorical<#c>)

  // Returns true if the distribution is empty.
  //
  // Note:
  // - Do not call generate() if this returns true, since there are no values to
  //   sample from.
  @value isEmpty () -> (Bool)
}

// General randomization functions.
concrete Randomize {
  // Creates a permutation from the CategoricalTree.
  //
  // 1. Creates a copy of the CategoricalTree.
  // 2. Samples from the copy *without* replacement until the tree is empty.
  //
  // Notes:
  // - The Generator must only return values in [0, 1).
  // - If category c has a weight of n, it will occur n times in the output.
  @category permuteFrom<#c> (CategoricalTree<#c>, Generator<Float>, Append<#c>) -> ()

  // Creates a permutation from the CategoricalTree.
  //
  // 1. Creates a copy of the CategoricalTree.
  // 2. Samples from the copy *without* replacement until the tree is empty.
  //
  // Notes:
  // - The Generator must only return values in [0, 1).
  // - If category c has a weight of n, it will occur *once* in the output, but
  //   it will have a relative chance of n to be chosen ahead of others.
  @category permuteFromWeight<#c> (CategoricalTree<#c>, Generator<Float>, Append<#c>) -> ()
}
