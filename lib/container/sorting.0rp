/* -----------------------------------------------------------------------------
Copyright 2021 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

// Sorting of sequences of values.
concrete Sorting {
  // In-place unstable sorting of a random-access container.
  //
  // Params:
  // - #x: Element type managed by the container.
  //
  // Notes:
  // - Worst-case performance is O(n log n).
  // - Worst-case storage is O(1).
  @category sort<#x>
    #x defines LessThan<#x>
  ([ReadAt<#x>&WriteAt<#x>]) -> ()

  // In-place unstable sorting of a random-access container.
  //
  // Params:
  // - #x: Element type managed by the container.
  // - #xx: Comparator type providing the LessThan<#x> comparison.
  //
  // Notes:
  // - Worst-case performance is O(n log n).
  // - Worst-case storage is O(1).
  //
  // Example:
  //
  //   // Sort myIntContainer in reverse order. (Reversed is from lib/util.)
  //   \ Sorting:sortWith<?,Reversed<Int>>(myIntContainer)
  @category sortWith<#x,#xx>
    #xx defines LessThan<#x>
  ([ReadAt<#x>&WriteAt<#x>]) -> ()

  // The same as sortWith, but with LessThan2 instead of LessThan.
  @category sortWith2<#x>
  ([ReadAt<#x>&WriteAt<#x>],LessThan2<#x>) -> ()

  // In-place order reversal of a random-access container.
  @category reverse<#x> ([ReadAt<#x>&WriteAt<#x>]) -> ()

  // In-place stable sorting of an iterable list.
  //
  // Params:
  // - #n: Node type representing the list.
  // - #x: Element type managed by the list.
  //
  // Returns:
  // - optional #n: The new head of the list after sorting.
  //
  // Notes:
  // - Worst-case performance is O(n log n).
  // - Worst-case storage is O(1).
  // - If the node is not the actual head, the part of the list being sorted
  //   might become detached from the earlier part of the list.
  @category sortList<#n,#x>
    #x defines LessThan<#x>
    #n requires ListNode<#n,#x>
  (optional #n) -> (optional #n)

  // In-place stable sorting of an iterable list.
  //
  // Params:
  // - #n: Node type representing the list.
  // - #x: Element type managed by the list.
  // - #xx: Comparator type providing the LessThan<#x> comparison.
  //
  // Returns:
  // - optional #n: The new head of the list after sorting.
  //
  // Notes:
  // - Worst-case performance is O(n log n).
  // - Worst-case storage is O(1).
  // - If the node is not the actual head, the part of the list being sorted
  //   might become detached from the earlier part of the list.
  //
  // Example:
  //
  //   // Sort myIntContainer in reverse order. (Reversed is from lib/util.)
  //   optional ListNode<#n,#x> newHead <- Sorting:sortListWith<?,?,Reversed<Int>>(oldHead)
  @category sortListWith<#n,#x,#xx>
    #xx defines LessThan<#x>
    #n requires ListNode<#n,#x>
  (optional #n) -> (optional #n)

  // The same as sortListWith, but with LessThan2 instead of LessThan.
  @category sortListWith2<#n,#x>
    #n requires ListNode<#n,#x>
  (optional #n,LessThan2<#x>) -> (optional #n)

  // Reverses the list in place and returns the new head.
  //
  // Returns:
  // - optional #n: The new head of the list after reversing.
  //
  // Notes:
  // - If the node is not the actual head, the part of the list being reversed
  //   might become detached from the earlier part of the list.
  @category reverseList<#n,#x>
    #n requires ListNode<#n,#x>
  (optional #n) -> (optional #n)
}
