concrete TypeTree {
  @type new () -> (TypeTree)
  @value set<#x> (TypeKey<#x>,#x) -> (TypeTree)
  @value remove (TypeKey<any>) -> (TypeTree)
  @value get<#x> (TypeKey<#x>) -> (optional #x)
}

concrete TypeKey<|#x> {
  // Note that TypeKey<#x> as a type argument for some #y can satisfy
  //
  //   #y defines LessThan<#y>
  //
  // even though we only define LessThan<TypeKey<any>>.
  //
  // This is non-trivial:
  //
  // - #x -> any, which is trivial.
  // - TypeKey<#x> -> TypeKey<any>, since TypeKey has a single covariant param.
  // - LessThan<TypeKey<any>> -> LessThan<TypeKey<#x>>, since LessThan has a
  //   single contravariant param.
  // - TypeKey<#x> -> LessThan<TypeKey<any>> -> LessThan<TypeKey<#x>>.
  //
  // This means that TypeKey<#x> can be used as a key in Tree. (See tree.0rp.)
  defines LessThan<TypeKey<any>>
  defines Equals<TypeKey<any>>

  @type new () -> (TypeKey<#x>)
}
