define Tree {
  @value optional Node<#k,#v> root

  new () {
    return Tree<#k,#v>{ empty }
  }

  set (k,v) {
    root <- Node<#k,#v>$insert(root,k,v)
    return self
  }

  remove (k) {
    root <- Node<#k,#v>$delete(root,k)
    return self
  }

  get (k) {
    return Node<#k,#v>$find(root,k)
  }
}

concrete Node<#k,#v> {
  #k defines LessThan<#k>

  @type insert (optional Node<#k,#v>,#k,#v) -> (Node<#k,#v>)
  @type delete (optional Node<#k,#v>,#k) -> (optional Node<#k,#v>)
  @type find (optional Node<#k,#v>,#k) -> (optional #v)

  @value getHeight () -> (Int)
  @value setHeight (Int) -> ()

  @value getKey () -> (#k)

  @value getValue () -> (#v)
  @value setValue (#v) -> ()

  @value getLeft () -> (optional Node<#k,#v>)
  @value getRight () -> (optional Node<#k,#v>)

  @value setLeft (optional Node<#k,#v>) -> ()
  @value setRight (optional Node<#k,#v>) -> ()
}

define Node {
  @value Int height
  @value #k key
  @value #v value
  @value optional Node<#k,#v> left
  @value optional Node<#k,#v> right

  insert (node,k,v) {
    if (present(node)) {
      Node<#k,#v> node2 <- require(node)
      if (#k$lessThan(k,node2.getKey())) {
        ~ node2.setLeft(insert(node2.getLeft(),k,v))
      } elif (#k$lessThan(node2.getKey(),k)) {
        ~ node2.setRight(insert(node2.getRight(),k,v))
      } else {
        ~ node2.setValue(v)
        return node2
      }
      ~ fixHeight(node2)
      return balance(node2)
    } else {
      return Node<#k,#v>{ 1, k, v, empty, empty }
    }
  }

  delete (node,k) {
    // TODO: Implement deletion.
    ~ LazyStream<String>$new()
        .append("Not Implemented")
        .write(SimpleOutput$fail())
    return empty
  }

  find (node,k) {
    if (present(node)) {
      scoped {
        Node<#k,#v> node2 <- require(node)
      } in if (#k$lessThan(k,node2.getKey())) {
        return find(node2.getLeft(),k)
      } elif (#k$lessThan(node2.getKey(),k)) {
        return find(node2.getRight(),k)
      } else {
        return node2.getValue()
      }
    } else {
      return empty
    }
  }

  getHeight () { return height }
  setHeight (h) { height <- h }

  getKey () { return key }

  getValue () { return value }
  setValue (v) { value <- v }

  getLeft () { return left }
  setLeft (l) { left <- l }
  getRight () { return right }
  setRight (r) { right <- r }

  @type fixHeight (Node<#k,#v>) -> ()
  fixHeight (node) {
    scoped {
      Int l <- 0
      Int r <- 0
      if (present(node.getLeft())) {
        l <- require(node.getLeft()).getHeight()
      }
      if (present(node.getRight())) {
        r <- require(node.getRight()).getHeight()
      }
    } in if (l > r) {
      ~ node.setHeight(l)
    } else {
      ~ node.setHeight(r)
    }
  }

  @type balance (Node<#k,#v>) -> (Node<#k,#v>)
  balance (node) {
    // TODO: Implement balancing.
    return node
  }
}
