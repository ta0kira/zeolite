concrete Main {
  defines Runner
}

define Main {
  @category TypeKey<Int>    keyInt    <- TypeKey<Int>$new()
  @category TypeKey<String> keyString <- TypeKey<String>$new()
  @category TypeKey<Float>  keyFloat  <- TypeKey<Float>$new()
  @category TypeKey<Value>  keyValue  <- TypeKey<Value>$new()

  run () {
    TypeTree tree <- TypeTree$new()
    ~ tree.set<Int>(keyInt,1)
    ~ tree.set<String>(keyString,"a")

    ~ check(tree,keyInt)
    ~ check(tree,keyString)
    ~ check(tree,keyFloat)

    ~ tree.set<Value>(keyValue,Value$new())
    ~ check(tree,keyValue)
  }

  @category check (TypeTree,TypeKey<Formatted>) -> ()
  check (tree,key) {
    scoped {
      optional Formatted value <- tree.get<Formatted>(key)
    } in if (present(value)) {
      ~ LazyStream<String>$new()
          .append("Found '")
          .append(require(value).formatted())
          .append("'\n")
          .writeTo(SimpleOutput$stderr())
    } else {
      ~ LazyStream<String>$new()
          .append("Not Found\n")
          .writeTo(SimpleOutput$stderr())
    }
  }
}

concrete Value {
  refines Formatted
  @type new () -> (Value)
}

define Value {
  new () { return Value{} }
  formatted () { return "Value" }
}
