/* -----------------------------------------------------------------------------
Copyright 2021-2023 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

define Run {
  then (first, second) {
    return delegate -> `RunThen:new`
  }

  ifElse (test, doIf, doElse) {
    return delegate -> `RunIfElse:new`
  }
}

concrete RunThen<#l, #s|> {
  @category new<#l, #s> (optional StateTransition<#l, #s>, optional StateTransition<#l, #s>) -> (optional StateTransition<#l, #s>)
}

define RunThen {
  refines StateTransition<#l, #s>

  @value StateTransition<#l, #s> first
  @value StateTransition<#l, #s> second

  new (first, second) {
    if (! `present` first) {
      return second
    } elif (! `present` second) {
      return first
    } else {
      return RunThen<#l, #s>{ `require` first, `require` second }
    }
  }

  runWith (label, state) {
    scoped {
      optional StateTransition<#l, #s> next <- label `first.runWith` state
    } in if (`present` next) {
      return #self{ `require` next, second }
    } else {
      return second
    }
  }
}

concrete RunIfElse<#l, #s|> {
  @category new<#l, #s>
  (StatePredicate<#l, #s> test:, optional StateTransition<#l, #s> doIf:, optional StateTransition<#l, #s> doElse:) ->
  (StateTransition<#l, #s>)
}

define RunIfElse {
  refines StateTransition<#l, #s>

  @value StatePredicate<#l, #s> test
  @value optional StateTransition<#l, #s> doIf
  @value optional StateTransition<#l, #s> doElse

  new (test, doIf, doElse) {
    return delegate -> RunIfElse<#l, #s>
  }

  runWith (label, state) {
    if (label `test.test` state) {
      return doIf
    } else {
      return doElse
    }
  }
}

define LabeledStateMachine {
  $ReadOnlyExcept[machine]$

  refines StateMachine

  @value #l label
  @value #s state
  @value optional StateTransition<#l, #s> machine

  new (label, state, transition) {
    return delegate -> LabeledStateMachine<#l, #s>
  }

  transition () {
    if (!present(machine)) {
      return empty
    } elif (`present` (machine <- label `require(machine).runWith` state)) {
      return self
    } else {
      return empty
    }
  }
}

define StateExecutor {
  multiplexStates (original, random) {
    HashedMap<Int, StateMachine> states <- HashedMap<Int, StateMachine>.new()
    CategoricalTree<Int> weights <- CategoricalTree<Int>.new()

    scoped {
      Int index <- 0
    } in traverse (original.defaultOrder() -> StateMachine state) {
      \ index `states.set` state
      \ index `weights.setWeight` 1
    } update {
      index <- index+1
    }
    $Hidden[original]$

    while (weights.getTotal() > 0) {
      Int index <- weights.locate((random.generate()*weights.getTotal().asFloat()).asInt())
      scoped {
        optional StateMachine newState <- require(states.get(index)).transition()
      } in if (`present` newState) {
        \ index `states.set` `require` newState
      } else {
        \ `states.remove` index
        \ index `weights.setWeight` 0
      }
    }
  }
}
