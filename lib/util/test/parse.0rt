/* -----------------------------------------------------------------------------
Copyright 2021,2023 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

testcase "ParseChars tests" {
  success TestChecker
}

unittest floatNoDecimal {
  \ ParseChars.float("123") `Matches:with` CheckErrorOr:value(CheckFloat:almostEquals(123.0))
}

unittest floatDecimalLeft {
  \ ParseChars.float(".123") `Matches:with` CheckErrorOr:value(CheckFloat:almostEquals(0.123))
}

unittest floatDecimalRight {
  \ ParseChars.float("123.") `Matches:with` CheckErrorOr:value(CheckFloat:almostEquals(123.0))
}

unittest floatDecimalMiddle {
  \ ParseChars.float("123.456") `Matches:with` CheckErrorOr:value(CheckFloat:almostEquals(123.456))
}

unittest floatLeadingTrailingZeros {
  \ ParseChars.float("000123.456000") `Matches:with` CheckErrorOr:value(CheckFloat:almostEquals(123.456))
}

unittest floatNegative {
  \ ParseChars.float("-123.456") `Matches:with` CheckErrorOr:value(CheckFloat:almostEquals(-123.456))
}

unittest floatPositive {
  \ ParseChars.float("+123.456") `Matches:with` CheckErrorOr:value(CheckFloat:almostEquals(123.456))
}

unittest floatNegativeDecimalLeft {
  \ ParseChars.float("-.456") `Matches:with` CheckErrorOr:value(CheckFloat:almostEquals(-0.456))
}

unittest floatExponentNoDecimal {
  \ ParseChars.float("123E5") `Matches:with` CheckErrorOr:value(CheckFloat:almostEquals(123.0E5))
}

unittest floatNegativeExponent {
  \ ParseChars.float("123E-5") `Matches:with` CheckErrorOr:value(CheckFloat:almostEquals(123.0E-5))
}

unittest floatPositiveExponent {
  \ ParseChars.float("123E+5") `Matches:with` CheckErrorOr:value(CheckFloat:almostEquals(123.0E5))
}

unittest floatExponentDecimalRight {
  \ ParseChars.float("123.E5") `Matches:with` CheckErrorOr:value(CheckFloat:almostEquals(123.0E5))
}

unittest floatExponentDecimalLeft {
  \ ParseChars.float(".123E5") `Matches:with` CheckErrorOr:value(CheckFloat:almostEquals(123.0E2))
}

unittest floatExponentDecimalMiddle {
  \ ParseChars.float("123.456E5") `Matches:with` CheckErrorOr:value(CheckFloat:almostEquals(123.456E5))
}

unittest floatEmpty {
  \ ParseChars.float("") `Matches:with` CheckErrorOr:error(CheckString:contains("missing digits"))
}

unittest floatNoDigits {
  \ ParseChars.float(".") `Matches:with` CheckErrorOr:error(CheckString:contains("missing digits"))
}

unittest floatTwoDecimals {
  \ ParseChars.float("1.1.") `Matches:with` CheckErrorOr:error(CheckString:contains("failed"))
}

unittest floatExponentNoDigitsNoDecimal {
  \ ParseChars.float("E5") `Matches:with` CheckErrorOr:error(CheckString:contains("E"))
}

unittest floatExponentNoDigitsDecimal {
  \ ParseChars.float(".E5") `Matches:with` CheckErrorOr:error(CheckString:contains("E"))
}

unittest floatExponentNoDigitsSign {
  \ ParseChars.float("-E5") `Matches:with` CheckErrorOr:error(CheckString:contains("E"))
}

unittest floatDecimalAfterExponent {
  \ ParseChars.float("1E.5") `Matches:with` CheckErrorOr:error(CheckString:contains("."))
}

unittest floatExponentExcessData {
  \ ParseChars.float("123E5Q") `Matches:with` CheckErrorOr:error(CheckString:contains("failed"))
}

unittest floatBadCharAfterDigit {
  \ ParseChars.float("123X") `Matches:with` CheckErrorOr:error(CheckString:contains("failed"))
}

unittest floatMissingExponentDigits {
  \ ParseChars.float("123E") `Matches:with` CheckErrorOr:error(CheckString:contains("exponent"))
}

unittest int {
  \ ParseChars.int("1234") `Matches:with` CheckErrorOr:value(CheckValue:equals(1234))
}

unittest intNegative {
  \ ParseChars.int("-1234") `Matches:with` CheckErrorOr:value(CheckValue:equals(-1234))
}

unittest intPositive {
  \ ParseChars.int("+1234") `Matches:with` CheckErrorOr:value(CheckValue:equals(1234))
}

unittest intLeadingZeros {
  \ ParseChars.int("001234") `Matches:with` CheckErrorOr:value(CheckValue:equals(1234))
}

unittest intEmpty {
  \ ParseChars.int("") `Matches:with` CheckErrorOr:error(CheckString:contains("missing digits"))
}

unittest intJustSign {
  \ ParseChars.int("-") `Matches:with` CheckErrorOr:error(CheckString:contains("missing digits"))
}

unittest intBadDigit {
  \ ParseChars.int("12A") `Matches:with` CheckErrorOr:error(CheckString:contains("failed"))
}

unittest hexInt {
  \ ParseChars.hexInt("12AbCdEf") `Matches:with` CheckErrorOr:value(CheckValue:equals(\x12ABCDEF))
}

unittest hexIntNegative {
  \ ParseChars.hexInt("-12AbCdEf") `Matches:with` CheckErrorOr:value(CheckValue:equals(-\x12ABCDEF))
}

unittest hexIntPositive {
  \ ParseChars.hexInt("+12AbCdEf") `Matches:with` CheckErrorOr:value(CheckValue:equals(\x12ABCDEF))
}

unittest hexIntLeadingZeros {
  \ ParseChars.hexInt("0012AbCdEf") `Matches:with` CheckErrorOr:value(CheckValue:equals(\x12ABCDEF))
}

unittest hexIntEmpty {
  \ ParseChars.hexInt("") `Matches:with` CheckErrorOr:error(CheckString:contains("missing digits"))
}

unittest hexIntJustSign {
  \ ParseChars.hexInt("-") `Matches:with` CheckErrorOr:error(CheckString:contains("missing digits"))
}

unittest hexIntBadDigit {
  \ ParseChars.hexInt("12Q") `Matches:with` CheckErrorOr:error(CheckString:contains("failed"))
}

unittest octInt {
  \ ParseChars.octInt("127") `Matches:with` CheckErrorOr:value(CheckValue:equals(\o127))
}

unittest octIntNegative {
  \ ParseChars.octInt("-127") `Matches:with` CheckErrorOr:value(CheckValue:equals(-\o127))
}

unittest octIntPositive {
  \ ParseChars.octInt("+127") `Matches:with` CheckErrorOr:value(CheckValue:equals(\o127))
}

unittest octIntLeadingZeros {
  \ ParseChars.octInt("00127") `Matches:with` CheckErrorOr:value(CheckValue:equals(\o127))
}

unittest octIntEmpty {
  \ ParseChars.octInt("") `Matches:with` CheckErrorOr:error(CheckString:contains("missing digits"))
}

unittest octIntJustSign {
  \ ParseChars.octInt("-") `Matches:with` CheckErrorOr:error(CheckString:contains("missing digits"))
}

unittest octIntBadDigit {
  \ ParseChars.octInt("19") `Matches:with` CheckErrorOr:error(CheckString:contains("failed"))
}

unittest binInt {
  \ ParseChars.binInt("100101") `Matches:with` CheckErrorOr:value(CheckValue:equals(\b100101))
}

unittest binIntNegative {
  \ ParseChars.binInt("-100101") `Matches:with` CheckErrorOr:value(CheckValue:equals(-\b100101))
}

unittest binIntPositive {
  \ ParseChars.binInt("+100101") `Matches:with` CheckErrorOr:value(CheckValue:equals(\b100101))
}

unittest binIntLeadingZeros {
  \ ParseChars.binInt("00100101") `Matches:with` CheckErrorOr:value(CheckValue:equals(\b100101))
}

unittest binIntEmpty {
  \ ParseChars.binInt("") `Matches:with` CheckErrorOr:error(CheckString:contains("missing digits"))
}

unittest binIntJustSign {
  \ ParseChars.binInt("-") `Matches:with` CheckErrorOr:error(CheckString:contains("missing digits"))
}

unittest binIntBadDigit {
  \ ParseChars.binInt("12") `Matches:with` CheckErrorOr:error(CheckString:contains("failed"))
}
