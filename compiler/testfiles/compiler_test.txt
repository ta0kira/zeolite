@type interface Create<#x|#y> {
  #y defines Create<#x,#y>
  create (#x) -> (#y)
}

@value interface Get<|#x> {
  get () -> (#x)
}

@value interface Set<#x|> {
  set (#x) -> ()
}

concrete Value<#x> {
  refines Get<#x>
  refines Set<#x>
  defines Create<#x,Value<#x>>

  @type create (#x) -> (Value<#x>)
  @category create2<#x> (#x) -> (Value<#x>)

  @value get () -> (#x)
}

define Value {
  @value #x value

  create (value) (created) {
    { created } <- Value$create2<#x>(value)
    created <- Value$create2<#x>(value)
    ~ set((created <- Value$create2<#x>(value)).get())
  }

  create2 (value) {
    return Value<#x>{ value }
  }

  get () {
    scoped {
      optional any y <- empty
    } in optional any x <- y
    x <- empty
    optional all y <- empty
    return value
  }

  @value set (#x) -> ()
  set (value2) {
    value <- value2
  }
}

concrete CreateProxy {
  @category create<#x,#y>
    #y defines Create<#x,#y>
  (#x) -> (#y)
}

define CreateProxy {
  create (value) {
    return #y$create(value)
  }
}
