/* -----------------------------------------------------------------------------
Copyright 2020,2023 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

testcase "read and write" {
  success TestChecker
}

unittest readWrite {
  String data <- "this is some\x00data"

  scoped {
    RawFileWriter writer <- RawFileWriter.open("testfile")
  } cleanup {
    \ writer.freeResource()
  } in {
    \ present(writer.getFileError()) `Matches:with` CheckValue:equals(false)
    Int writeSize <- writer.writeBlock(data)
    if (writeSize != data.size()) {
      fail(writeSize)
    }
    \ present(writer.getFileError()) `Matches:with` CheckValue:equals(false)
  }

  scoped {
    RawFileReader reader <- RawFileReader.open("testfile")
  } cleanup {
    \ reader.freeResource()
  } in {
    \ present(reader.getFileError()) `Matches:with` CheckValue:equals(false)

    scoped {
      String data2 <- reader.readBlock(8)
    } in if (data2 != "this is ") {
      fail("\"" + data2 + "\"")
    }
    scoped {
      String data2 <- reader.readBlock(20)
    } in if (data2 != "some\x00data") {
      fail("\"" + data2 + "\"")
    }
    \ present(reader.getFileError()) `Matches:with` CheckValue:equals(false)

    if (!reader.pastEnd()) {
      fail("more data in file")
    }
  }
}

unittest forceRead {
  String data <- "test data"

  scoped {
    RawFileWriter writer <- RawFileWriter.open("testfile")
  } cleanup {
    \ writer.freeResource()
  } in \ writer.writeBlock(data)

  \ FileTesting.forceReadFile("testfile") `Matches:with` CheckValue:equals(data)
}

unittest readEmpty {
  \ RawFileWriter.open("testfile").freeResource()
  RawFileReader reader <- RawFileReader.open("testfile")

  String data <- reader.readBlock(10)
  if (data != "") {
    fail("\"" + data + "\"")
  }
  \ present(reader.getFileError()) `Matches:with` CheckValue:equals(false)
  if (!reader.pastEnd()) {
    fail("more data in file")
  }
}

unittest readMissing {
  RawFileReader reader <- RawFileReader.open("do-not-create-this-file")
  \ present(reader.getFileError()) `Matches:with` CheckValue:equals(true)
}

unittest unwritable {
  RawFileWriter writer <- RawFileWriter.open("testfile")
  \ writer.freeResource()
  \ present(writer.getFileError()) `Matches:with` CheckValue:equals(true)
}


testcase "read missing file crash" {
  failure
  require "do-not-create-this-file"
  require "RawFileReader .*creation"
}

unittest test {
  RawFileReader reader <- RawFileReader.open("do-not-create-this-file")
  \ reader.readBlock(0)
}


testcase "unwritable file crash" {
  failure
  require "testfile"
  require "RawFileWriter .*creation"
}

unittest test {
  RawFileWriter writer <- RawFileWriter.open("testfile")
  \ writer.freeResource()
  \ writer.writeBlock("")
}
