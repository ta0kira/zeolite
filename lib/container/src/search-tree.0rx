/* -----------------------------------------------------------------------------
Copyright 2019-2021 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

define SearchTree {
  @value AutoBinaryTree<SearchTreeNode<#k,#v>,#k,#v,BinaryTreeNode<#k,#v>> tree

  new () {
    return #self{ AutoBinaryTree<SearchTreeNode<#k,#v>,#k,#v,BinaryTreeNode<#k,#v>>.new() }
  }

  size () {
    return tree.size()
  }

  duplicate () {
    return #self{ tree.duplicate() }
  }

  set (k,v) {
    \ tree.set(k,v)
    return self
  }

  remove (k) {
    \ tree.remove(k)
    return self
  }

  get (k) {
    return tree.get(k)
  }

  defaultOrder () {
    return ForwardTreeOrder:create(tree.getRoot())
  }

  reverseOrder () {
    return ReverseTreeOrder:create(tree.getRoot())
  }

  getForward (k) {
    return ForwardTreeOrder:seek(k,tree.getRoot())
  }

  getReverse (k) {
    return ReverseTreeOrder:seek(k,tree.getRoot())
  }
}

define ValidatedTree {
  @value AutoBinaryTree<SearchTreeNode<#k,#v>,#k,#v,BinaryTreeNode<#k,#v>> tree

  new () { $NoTrace$
    return #self{ AutoBinaryTree<SearchTreeNode<#k,#v>,#k,#v,BinaryTreeNode<#k,#v>>.new() }
  }

  size () { $NoTrace$
    return tree.size()
  }

  set (k,v) { $NoTrace$
    \ tree.set(k,v)
    \ validate(tree.getRoot())
    return self
  }

  remove (k) { $NoTrace$
    \ tree.remove(k)
    \ validate(tree.getRoot())
    return self
  }

  get (k) { $NoTrace$
    return tree.get(k)
  }

  @type validate (optional BinaryTreeNode<#k,#v>) -> ()
  validate (node) { $NoTrace$
    if (present(node)) {
      \ validateOrder(require(node))
      \ validateBalance(require(node))
    }
  }

  @type validateOrder (BinaryTreeNode<#k,#v>) -> ()
  validateOrder (node) { $NoTrace$
    if (present(node.getLower())) {
      if (!(require(node.getLower()).getKey() `#k.lessThan` node.getKey())) {
        fail("bad lower order")
      }
      \ validateOrder(require(node.getLower()))
    }
    if (present(node.getHigher())) {
      if (!(node.getKey() `#k.lessThan` require(node.getHigher()).getKey())) {
        fail("bad higher order")
      }
      \ validateOrder(require(node.getHigher()))
    }
  }

  @type validateBalance (BinaryTreeNode<#k,#v>) -> ()
  validateBalance (node) { $NoTrace$
    scoped {
      Int balance <- 0
      if (present(node.getLower())) {
        balance <- balance-require(node.getLower()).getHeight()
      }
      if (present(node.getHigher())) {
        balance <- balance+require(node.getHigher()).getHeight()
      }
      $ReadOnly[balance]$
    } in if (balance > 1 || balance < -1) {
      fail("out of balance: " + balance.formatted())
    }
    if (present(node.getLower())) {
      \ validateBalance(require(node.getLower()))
    }
    if (present(node.getHigher())) {
      \ validateBalance(require(node.getHigher()))
    }
  }
}

concrete SearchTreeNode<#k,#v> {
  defines KVFactory<#k,#v>
  refines BalancedTreeNode<SearchTreeNode<#k,#v>,#k,#v>
  refines Duplicate
}

define SearchTreeNode {
  $ReadOnly[key]$

  @value Int height
  @value #k key
  @value #v value
  @value optional #self lower
  @value optional #self higher

  newNode (k,v) {
    return #self{ 1, k, v, empty, empty }
  }

  duplicate () {
    optional #self lower2 <- empty
    if (present(lower)) {
      lower2 <- require(lower).duplicate()
    }
    optional #self higher2 <- empty
    if (present(higher)) {
      higher2 <- require(higher).duplicate()
    }
    return #self{ height, key, value, lower2, higher2 }
  }

  getLower ()   { return lower }
  setLower (l)  { lower <- l }
  getHigher ()  { return higher }
  setHigher (h) { higher <- h }
  getKey ()     { return key }
  getValue ()   { return value }
  setValue (v)  { value <- v }
  getHeight ()  { return height }

  updateNode () {
    scoped {
      Int l <- 0
      Int h <- 0
      if (present(lower)) {
        l <- require(lower).getHeight()
      }
      if (present(higher)) {
        h <- require(higher).getHeight()
      }
    } in if (l > h) {
      height <- l + 1
    } else {
      height <- h + 1
    }
  }
}
