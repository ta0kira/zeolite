/* -----------------------------------------------------------------------------
Copyright 2023 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

define ZeoliteParsed {
  $ReadOnlyExcept[]$

  @value String label
  @value optional String content
  @value DefaultOrder<ZeoliteParsed> subsections

  leaf (label, content) {
    return #self{ label, content, AlwaysEmpty.default() }
  }

  section (label, subsections) {
    return #self{ label, empty, subsections }
  }

  testCompare (actual, report) {
    \ MultiChecker.new(report)
        .check(
            title: "label",
            actual.label(),
            CheckValue:equals(label))
        &.tryCheck(
            title: "content",
            actual.content(),
            CheckValue:equals(content))
        &.tryCheck(
            title: "subsections",
            actual.subsections(),
            CheckSequence:matches(CheckSequence:using(subsections)))
  }

  formatted () {
    [Append<Formatted> & Build<String>] builder <- String.builder()
        .append("ZeoliteParsed{label:")
        .append(label)
    if (`present` content) {
      \ builder
          .append(",content:\"")
          .append(CharType.escapeBreaks(`require` content))
          .append("\"")
    } else {
        traverse (subsections.defaultOrder() -> Formatted subsection) {
        \ builder
            .append(",")
            .append(subsection)
      }
    }
    \ builder.append("}")
    return builder.build()
  }

  formatWith (formatter) {
    if (`present` content) {
      return formatter.formatLeaf(label: label, value: `require` content)
    } else {
      [Append<#f> & Build<#f>] builder <- formatter.createSection(label: label)
      traverse (subsections.defaultOrder() -> ZeoliteParsed subsection) {
        \ builder.append(subsection.formatWith(formatter))
      }
      return builder.build()
    }
  }

  @value label () -> (String)
  label () {
    return label
  }

  @value content () -> (optional String)
  content () {
    return content
  }

  @value subsections () -> (DefaultOrder<ZeoliteParsed>)
  subsections () {
    return subsections
  }
}

define ZeoliteParseContext {
  $ReadOnlyExcept[]$

  refines Tokenizer<ZeoliteParseContext, ZeoliteParsed>

  @value [DefaultOrder<String> & Append<String>] types
  @value HashedMap<String, Tokenizer<ZeoliteParseContext, ZeoliteParsed>> tokenizers

  new () {
    return #self{ Vector<String>.new(), HashedMap<String, Tokenizer<ZeoliteParseContext, ZeoliteParsed>>.new() }
  }

  defaultTokenizer () {
    return self
  }

  include () {
    \ #t.tokenizerName() `tokenizers.set` #t.tokenizer()
    \ types.append(#t.tokenizerName())
    return self
  }

  get (k) {
    return delegate -> `tokenizers.get`
  }

  tokenize (input, context) (token) {
    token <- empty
    traverse (types.defaultOrder() -> String type) {
      scoped {
        optional Tokenizer<ZeoliteParseContext, ZeoliteParsed> tokenizer <- context.get(type)
      } in if (`present` tokenizer) {
        token <- require(tokenizer).tokenize(input, context)
      }
    } update {
      if (`present` token) {
        break
      }
    }
  }
}

define ZeoliteWhitespace {
  refines Tokenizer<ZeoliteParseContext, ZeoliteParsed>

  tokenizer () {
    return #self{ }
  }

  tokenizerName () {
    return typename<#self>().formatted()
  }

  tokenize (input, context) (token) {
    \ input.reset()
    token <- empty
    optional Char current <- input.current()
    while (`present` current && CharType.whitespace(`require` current)) {
      current <- input.forward().current()
    }
    scoped {
      String content <- input.take()
    } in if (content.size() > 0) {
      token <- ZeoliteParsed.leaf(label: tokenizerName(), content: content)
    }
  }
}

define ZeoliteLineComment {
  refines Tokenizer<ZeoliteParseContext, ZeoliteParsed>

  tokenizer () {
    return #self{ }
  }

  tokenizerName () {
    return typename<#self>().formatted()
  }

  tokenize (input, context) (token) {
    \ input.reset()
    token <- empty
    \ input.forward().forward()
    if (input.preview() != "//") {
      return _
    }
    optional Char current <- input.current()
    while (`present` current && !CharType.oneOf(`require` current, "\r\n")) {
      current <- input.forward().current()
    }
    token <- ZeoliteParsed.leaf(label: tokenizerName(), content: input.take())
  }
}

define ZeoliteCategoryName {
  refines Tokenizer<ZeoliteParseContext, ZeoliteParsed>

  tokenizer () {
    return #self{ }
  }

  tokenizerName () {
    return typename<#self>().formatted()
  }

  tokenize (input, context) (token) {
    \ input.reset()
    token <- empty
    optional Char current <- input.current()
    if (! `present` current || !CharType.upper(`require` current)) {
      return _
    }
    while (`present` current && CharType.alphaNum(`require` current)) {
      current <- input.forward().current()
    }
    token <- ZeoliteParsed.leaf(label: tokenizerName(), content: input.take())
  }
}

define ZeoliteParamName {
  refines Tokenizer<ZeoliteParseContext, ZeoliteParsed>

  tokenizer () {
    return #self{ }
  }

  tokenizerName () {
    return typename<#self>().formatted()
  }

  tokenize (input, context) (token) {
    \ input.reset()
    token <- empty
    optional Char current <- input.current()
    if (! `present` current || `require` current != '#') {
      return _
    }
    current <- input.forward().current()
    if (! `present` current || !CharType.lower(`require` current)) {
      return _
    }
    while (`present` current && CharType.alphaNum(`require` current)) {
      current <- input.forward().current()
    }
    token <- ZeoliteParsed.leaf(label: tokenizerName(), content: input.take())
  }
}

define ZeoliteBraceSection {
  refines Tokenizer<ZeoliteParseContext, ZeoliteParsed>

  tokenizer () {
    return #self{ }
  }

  tokenizerName () {
    return typename<#self>().formatted()
  }

  tokenize (input, context) (token) {
    \ input.reset()
    token <- empty
    if (input.atEnd() || `require` input.current() != '{') {
      return _
    }
    Vector<ZeoliteParsed> subsections <- Vector<ZeoliteParsed>.new()
    \ subsections.append(ZeoliteParsed.leaf(label: "ZeoliteOpenBrace", content: input.forward().take()))
    \ StreamTokenizer:new(context: context, tokenizer: context.defaultTokenizer()).tokenizeAll(input, subsections)
    \ input.reset()
    if (!input.atEnd() && `require` input.current() == '}') {
      \ subsections.append(ZeoliteParsed.leaf(label: "ZeoliteCloseBrace", content: input.forward().take()))
    }
    token <- ZeoliteParsed.section(label: tokenizerName(), subsections)
  }
}
