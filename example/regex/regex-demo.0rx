concrete RegexDemo {
  defines Runner
}

define RegexDemo {
  run () {
    ~ testMatchSingleCharMatch()
    ~ testMatchSingleCharPartialMatch()
    ~ testMatchSingleCharNonMatch()
    ~ testMatchCharRangeMatch()
    ~ testMatchCharRangePartialMatch()
    ~ testMatchCharRangeNonMatch()
    ~ testMatchAnyCharMatch()
    ~ testMatchAnyCharPartialMatch()
    ~ testMatchAnyCharNonMatch()
  }

  @type testMatchSingleCharMatch () -> ()
  testMatchSingleCharMatch () {
    MatchSingleChar<Char> matcher <- MatchSingleChar<Char>$create('x')
    ReadIterator<Char> data <- ReadIterator$$fromReadPosition<Char>("x")
    { MatchState state,
      data,
      optional LinkedNode<Matcher<ReadIterator<Char>>> branch } <-
        matcher.tryNextMatch(data)

    if (!MatchState$equals(state,MatchState$matchComplete())) {
      ~ fail(state)
    }
    if (!data.pastForwardEnd()) {
      ~ fail("data not incremented")
    }
    if (present(branch)) {
      ~ fail("branch present")
    }
  }

  @type testMatchSingleCharPartialMatch () -> ()
  testMatchSingleCharPartialMatch () {
    MatchSingleChar<Char> matcher <- MatchSingleChar<Char>$create('x')
    ReadIterator<Char> data <- ReadIterator$$fromReadPosition<Char>("xy")
    { MatchState state,
      data,
      optional LinkedNode<Matcher<ReadIterator<Char>>> branch } <-
        matcher.tryNextMatch(data)

    if (!MatchState$equals(state,MatchState$matchEnd())) {
      ~ fail(state)
    }
    if (data.readCurrent() != 'y') {
      ~ fail(data.readCurrent())
    }
    if (present(branch)) {
      ~ fail("branch present")
    }
  }

  @type testMatchSingleCharNonMatch () -> ()
  testMatchSingleCharNonMatch () {
    MatchSingleChar<Char> matcher <- MatchSingleChar<Char>$create('x')
    ReadIterator<Char> data <- ReadIterator$$fromReadPosition<Char>("zy")
    { MatchState state,
      data,
      optional LinkedNode<Matcher<ReadIterator<Char>>> branch } <-
        matcher.tryNextMatch(data)

    if (!MatchState$equals(state,MatchState$matchFail())) {
      ~ fail(state)
    }
    if (data.readCurrent() != 'y') {
      ~ fail(data.readCurrent())
    }
    if (present(branch)) {
      ~ fail("branch present")
    }
  }

  @type testMatchCharRangeMatch () -> ()
  testMatchCharRangeMatch () {
    MatchCharRange<Char> matcher <- MatchCharRange<Char>$create('w','y')
    ReadIterator<Char> data <- ReadIterator$$fromReadPosition<Char>("x")
    { MatchState state,
      data,
      optional LinkedNode<Matcher<ReadIterator<Char>>> branch } <-
        matcher.tryNextMatch(data)

    if (!MatchState$equals(state,MatchState$matchComplete())) {
      ~ fail(state)
    }
    if (!data.pastForwardEnd()) {
      ~ fail("data not incremented")
    }
    if (present(branch)) {
      ~ fail("branch present")
    }
  }

  @type testMatchCharRangePartialMatch () -> ()
  testMatchCharRangePartialMatch () {
    MatchCharRange<Char> matcher <- MatchCharRange<Char>$create('w','y')
    ReadIterator<Char> data <- ReadIterator$$fromReadPosition<Char>("xy")
    { MatchState state,
      data,
      optional LinkedNode<Matcher<ReadIterator<Char>>> branch } <-
        matcher.tryNextMatch(data)

    if (!MatchState$equals(state,MatchState$matchEnd())) {
      ~ fail(state)
    }
    if (data.readCurrent() != 'y') {
      ~ fail(data.readCurrent())
    }
    if (present(branch)) {
      ~ fail("branch present")
    }
  }

  @type testMatchCharRangeNonMatch () -> ()
  testMatchCharRangeNonMatch () {
    MatchCharRange<Char> matcher <- MatchCharRange<Char>$create('w','y')
    ReadIterator<Char> data <- ReadIterator$$fromReadPosition<Char>("zy")
    { MatchState state,
      data,
      optional LinkedNode<Matcher<ReadIterator<Char>>> branch } <-
        matcher.tryNextMatch(data)

    if (!MatchState$equals(state,MatchState$matchFail())) {
      ~ fail(state)
    }
    if (data.readCurrent() != 'y') {
      ~ fail(data.readCurrent())
    }
    if (present(branch)) {
      ~ fail("branch present")
    }
  }

  @type testMatchAnyCharMatch () -> ()
  testMatchAnyCharMatch () {
    MatchAnyChar<Char> matcher <- MatchAnyChar<Char>$create()
    ReadIterator<Char> data <- ReadIterator$$fromReadPosition<Char>("x")
    { MatchState state,
      data,
      optional LinkedNode<Matcher<ReadIterator<Char>>> branch } <-
        matcher.tryNextMatch(data)

    if (!MatchState$equals(state,MatchState$matchComplete())) {
      ~ fail(state)
    }
    if (!data.pastForwardEnd()) {
      ~ fail("data not incremented")
    }
    if (present(branch)) {
      ~ fail("branch present")
    }
  }

  @type testMatchAnyCharPartialMatch () -> ()
  testMatchAnyCharPartialMatch () {
    MatchAnyChar<Char> matcher <- MatchAnyChar<Char>$create()
    ReadIterator<Char> data <- ReadIterator$$fromReadPosition<Char>("xy")
    { MatchState state,
      data,
      optional LinkedNode<Matcher<ReadIterator<Char>>> branch } <-
        matcher.tryNextMatch(data)

    if (!MatchState$equals(state,MatchState$matchEnd())) {
      ~ fail(state)
    }
    if (data.readCurrent() != 'y') {
      ~ fail(data.readCurrent())
    }
    if (present(branch)) {
      ~ fail("branch present")
    }
  }

  @type testMatchAnyCharNonMatch () -> ()
  testMatchAnyCharNonMatch () {
    MatchAnyChar<Char> matcher <- MatchAnyChar<Char>$create()
    ReadIterator<Char> data <- ReadIterator$$fromReadPosition<Char>("")
    { MatchState state,
      data,
      optional LinkedNode<Matcher<ReadIterator<Char>>> branch } <-
        matcher.tryNextMatch(data)

    if (!MatchState$equals(state,MatchState$matchFail())) {
      ~ fail(state)
    }
    if (present(branch)) {
      ~ fail("branch present")
    }
  }
}
