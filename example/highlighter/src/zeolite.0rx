/* -----------------------------------------------------------------------------
Copyright 2023 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

define ZeoliteSection {
  $ReadOnlyExcept[]$

  @value String content
  @value String label

  new (content, label) {
    if (content.size() < 1) {
      return empty
    } else {
      return ZeoliteSection{ content, label }
    }
  }

  testCompare (actual, report) {
    \ MultiChecker.new(report)
        .tryCheck(
            title: "content",
            actual.content(),
            CheckValue:equals(content))
        .tryCheck(
            title: "label",
            actual.label(),
            CheckValue:equals(label))
  }

  formatted () {
    return String.builder()
        .append("ZeoliteSection{\"")
        .append(CharType.escapeBreaks(content))
        .append("\",")
        .append(label)
        .append("}")
        .build()
  }

  @value content () -> (String)
  content () {
    return content
  }

  @value label () -> (String)
  label () {
    return label
  }
}

define ZeoliteTokenizers {
  $ReadOnlyExcept[]$

  @value HashedMap<String, Tokenizer<ZeoliteTokenizers, ZeoliteSection>> tokenizers

  new () {
    return #self{ HashedMap<String, Tokenizer<ZeoliteTokenizers, ZeoliteSection>>.new() }
  }

  include () {
    \ #t.tokenizerName() `tokenizers.set` #t.tokenizer()
    return self
  }

  get (k) {
    return delegate -> `tokenizers.get`
  }
}

define ZeoliteSelectFrom {
  $ReadOnlyExcept[]$

  @value [DefaultOrder<String> & Append<String>] types

  new () {
    return #self{ Vector<String>.new() }
  }

  include () {
    \ types.append(#t.tokenizerName())
    return self
  }

  tokenize (input, tokenizers) (token) {
    token <- empty
    traverse (types.defaultOrder() -> String type) {
      scoped {
        optional Tokenizer<ZeoliteTokenizers, ZeoliteSection> tokenizer <- tokenizers.get(type)
      } in if (`present` tokenizer) {
        token <- require(tokenizer).tokenize(input, tokenizers)
      }
    } update {
      if (`present` token) {
        break
      }
    }
  }
}

define ZeoliteWhitespace {
  refines Tokenizer<ZeoliteTokenizers, ZeoliteSection>

  tokenizer () {
    return #self{ }
  }

  tokenizerName () {
    return typename<#self>().formatted()
  }

  tokenize (input, tokenizers) (token) {
    \ input.reset()
    token <- empty
    optional Char current <- input.current()
    while (`present` current && CharType.whitespace(`require` current)) {
      current <- input.forward().current()
    }
    token <- ZeoliteSection.new(content: input.take(), label: tokenizerName())
  }
}

define ZeoliteLineComment {
  refines Tokenizer<ZeoliteTokenizers, ZeoliteSection>

  tokenizer () {
    return #self{ }
  }

  tokenizerName () {
    return typename<#self>().formatted()
  }

  tokenize (input, tokenizers) (token) {
    \ input.reset()
    token <- empty
    \ input.forward().forward()
    if (input.preview() != "//") {
      return _
    }
    optional Char current <- input.current()
    while (`present` current && !CharType.oneOf(`require` current, "\r\n")) {
      current <- input.forward().current()
    }
    token <- ZeoliteSection.new(content: input.take(), label: tokenizerName())
  }
}

define ZeoliteCategoryName {
  refines Tokenizer<ZeoliteTokenizers, ZeoliteSection>

  tokenizer () {
    return #self{ }
  }

  tokenizerName () {
    return typename<#self>().formatted()
  }

  tokenize (input, tokenizers) (token) {
    \ input.reset()
    token <- empty
    optional Char current <- input.current()
    if (! `present` current || !CharType.upper(`require` current)) {
      return _
    }
    while (`present` current && CharType.alphaNum(`require` current)) {
      current <- input.forward().current()
    }
    token <- ZeoliteSection.new(content: input.take(), label: tokenizerName())
  }
}

define ZeoliteParamName {
  refines Tokenizer<ZeoliteTokenizers, ZeoliteSection>

  tokenizer () {
    return #self{ }
  }

  tokenizerName () {
    return typename<#self>().formatted()
  }

  tokenize (input, tokenizers) (token) {
    \ input.reset()
    token <- empty
    optional Char current <- input.current()
    if (! `present` current || `require` current != '#') {
      return _
    }
    current <- input.forward().current()
    if (! `present` current || !CharType.lower(`require` current)) {
      return _
    }
    while (`present` current && CharType.alphaNum(`require` current)) {
      current <- input.forward().current()
    }
    token <- ZeoliteSection.new(content: input.take(), label: tokenizerName())
  }
}
