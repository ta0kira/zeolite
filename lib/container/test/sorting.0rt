/* -----------------------------------------------------------------------------
Copyright 2021,2023 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

testcase "Sorting tests" {
  success TestChecker
  timeout 5
}

unittest sort {
  TestSequence original <- TestSequence.create()
  TestSequence expected <- TestSequence.create()
  Int hash <- 269
  Int size <- 137
  $ReadOnly[hash,size]$

  traverse (Counter.zeroIndexed(size) -> Int i) {
    \ original.append((i*hash)%size/3)
    \ expected.append(i/3)
  }

  \ Sorting:sort(original)
  \ original `Matches:with` CheckValue:equals(expected)
}

unittest sortWith { $DisableCoverage$
  TestSequence original <- TestSequence.create()
  TestSequence expected <- TestSequence.create()
  Int hash <- 313
  Int size <- 197
  $ReadOnly[hash,size]$

  traverse (Counter.revZeroIndexed(size) -> Int i) {
    \ original.append((i*hash)%size/3)
    \ expected.append(i/3)
  }

  \ Sorting:sortWith<?,Reversed<Int>>(original)
  \ original `Matches:with` CheckValue:equals(expected)
}

unittest sortEmpty {
  TestSequence original <- TestSequence.create()
  TestSequence expected <- TestSequence.create()

  \ Sorting:sort(original)
  \ original `Matches:with` CheckValue:equals(expected)
}

unittest reverseEvenSize {
  TestSequence original <- TestSequence.create()
  TestSequence expected <- TestSequence.create()
  Int size <- 100
  $ReadOnly[size]$

  traverse (Counter.zeroIndexed(size) -> Int i) {
    \ expected.append(i)
  }

  traverse (Counter.revZeroIndexed(size) -> Int i) {
    \ original.append(i)
  }

  \ Sorting:reverse(original)
  \ original `Matches:with` CheckValue:equals(expected)
}

unittest reverseOddSize { $DisableCoverage$
  TestSequence original <- TestSequence.create()
  TestSequence expected <- TestSequence.create()
  Int size <- 101
  $ReadOnly[size]$

  traverse (Counter.zeroIndexed(size) -> Int i) {
    \ expected.append(i)
  }

  traverse (Counter.revZeroIndexed(size) -> Int i) {
    \ original.append(i)
  }

  \ Sorting:reverse(original)
  \ original `Matches:with` CheckValue:equals(expected)
}

unittest reverseEmpty {
  TestSequence original <- TestSequence.create()
  TestSequence expected <- TestSequence.create()

  \ Sorting:reverse(original)
  \ original `Matches:with` CheckValue:equals(expected)
}

unittest sortList {
  ListBuilder<Int,LinkedNode<Int>> builder <- LinkedNode<Int>.builder()
  Vector<Int> expected <- Vector<Int>.new()
  Int hash <- 269
  Int size <- 137
  $ReadOnly[hash,size]$

  traverse (Counter.zeroIndexed(size) -> Int i) {
    \ builder.append((i*hash)%size/3)
    \ expected.append(i/3)
  }

  optional LinkedNode<Int> actual <- Sorting:sortList(builder.build(){0})

  traverse (expected.defaultOrder() -> Int n) {
    \ require(actual).get() `Matches:with` CheckValue:equals(n)
  } update {
    actual <- require(actual).next()
  }
  \ present(actual) `Matches:with` CheckValue:equals(false)
}

unittest sortListSingle { $DisableCoverage$
  ListBuilder<Int,ForwardNode<Int>> builder <- ForwardNode<Int>.builder()
  Vector<Int> expected <- Vector<Int>.new()
  Int hash <- 269
  Int size <- 137
  $ReadOnly[hash,size]$

  traverse (Counter.zeroIndexed(size) -> Int i) {
    \ builder.append((i*hash)%size/3)
    \ expected.append(i/3)
  }

  optional ForwardNode<Int> actual <- Sorting:sortList(builder.build(){0})

  traverse (expected.defaultOrder() -> Int n) {
    \ require(actual).get() `Matches:with` CheckValue:equals(n)
  } update {
    actual <- require(actual).next()
  }
  \ present(actual) `Matches:with` CheckValue:equals(false)
}

unittest sortListEmpty {
  \ Sorting:sortList<LinkedNode<Int>,Int>(empty)
}

unittest sortListPow2 { $DisableCoverage$
  ListBuilder<Int,LinkedNode<Int>> builder <- LinkedNode<Int>.builder()
  Vector<Int> expected <- Vector<Int>.new()
  Int hash <- 269
  Int size <- 256
  $ReadOnly[hash,size]$

  traverse (Counter.zeroIndexed(size) -> Int i) {
    \ builder.append((i*hash)%size/3)
    \ expected.append(i/3)
  }

  optional LinkedNode<Int> actual <- Sorting:sortList(builder.build(){0})

  traverse (expected.defaultOrder() -> Int n) {
    \ require(actual).get() `Matches:with` CheckValue:equals(n)
  } update {
    actual <- require(actual).next()
  }
  \ present(actual) `Matches:with` CheckValue:equals(false)
}

unittest sortListWith { $DisableCoverage$
  ListBuilder<Int,LinkedNode<Int>> builder <- LinkedNode<Int>.builder()
  Vector<Int> expected <- Vector<Int>.new()
  Int hash <- 269
  Int size <- 137
  $ReadOnly[hash,size]$

  traverse (Counter.revZeroIndexed(size) -> Int i) {
    \ builder.append((i*hash)%size/3)
    \ expected.append(i/3)
  }

  optional LinkedNode<Int> actual <- Sorting:sortListWith<?,?,Reversed<Int>>(builder.build(){0})

  traverse (expected.defaultOrder() -> Int n) {
    \ require(actual).get() `Matches:with` CheckValue:equals(n)
  } update {
    actual <- require(actual).next()
  }
  \ present(actual) `Matches:with` CheckValue:equals(false)
}

unittest reverseList {
  ListBuilder<Int,LinkedNode<Int>> builder <- LinkedNode<Int>.builder()
  Vector<Int> expected <- Vector<Int>.new()
  Int size <- 101
  $ReadOnly[size]$

  traverse (Counter.zeroIndexed(size) -> Int i) {
    \ expected.append(i)
  }

  traverse (Counter.revZeroIndexed(size) -> Int i) {
    \ builder.append(i)
  }

  optional LinkedNode<Int> reversed <- Sorting:reverseList(builder.build(){0})

  traverse (expected.defaultOrder() -> Int value) {
    \ require(reversed).get() `Matches:with` CheckValue:equals(value)
  } update {
    reversed <- require(reversed).next()
  }
  \ present(reversed) `Matches:with` CheckValue:equals(false)
}

unittest reverseListSingle { $DisableCoverage$
  ListBuilder<Int,ForwardNode<Int>> builder <- ForwardNode<Int>.builder()
  Vector<Int> expected <- Vector<Int>.new()
  Int size <- 101
  $ReadOnly[size]$

  traverse (Counter.zeroIndexed(size) -> Int i) {
    \ expected.append(i)
  }

  traverse (Counter.revZeroIndexed(size) -> Int i) {
    \ builder.append(i)
  }

  optional ForwardNode<Int> reversed <- Sorting:reverseList(builder.build(){0})

  traverse (expected.defaultOrder() -> Int value) {
    \ require(reversed).get() `Matches:with` CheckValue:equals(value)
  } update {
    reversed <- require(reversed).next()
  }
  \ present(reversed) `Matches:with` CheckValue:equals(false)
}

unittest reverseListEmpty {
  \ Sorting:reverseList<LinkedNode<Int>,Int>(empty)
}

concrete TestSequence {
  refines Formatted
  refines ReadAt<Int>
  refines WriteAt<Int>
  refines Append<Int>
  defines Equals<TestSequence>

  @type create () -> (TestSequence)
}

define TestSequence {
  @value Vector<Int> seq

  create () {
    return TestSequence{ Vector<Int>.new() }
  }

  formatted () {
    [Append<Formatted>&Build<String>] builder <- String.builder()
    \ builder.append("{")
    traverse (seq.defaultOrder() -> Formatted x) {
      \ builder.append(" ").append(x)
    }
    return builder.append(" }").build()
  }

  size () {
    return seq.size()
  }

  readAt (i) {
    return seq.readAt(i)
  }

  writeAt (i,x) {
    \ seq.writeAt(i,x)
    return self
  }

  append (x) {
    \ seq.append(x)
    return self
  }

  equals (x,y) {
    return x `ReadAtH:equals` y
  }
}
