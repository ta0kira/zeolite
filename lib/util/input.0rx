/* -----------------------------------------------------------------------------
Copyright 2019-2021 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

define TextReader {
  @value BlockReader<String> reader
  @value String buffer

  fromBlockReader (reader) {
    return TextReader{ reader, "" }
  }

  readAll (reader) {
    Builder<String> builder <- String.builder()
    while (!reader.pastEnd()) {
      \ builder.append(reader.readBlock($ExprLookup[BLOCK_READ_SIZE]$))
    }
    return builder.build()
  }

  readNextLine () {
    while (true) {
      Int newline <- findNewline()
      if (newline < 0) {
        if (reader.pastEnd()) {
          cleanup {
            buffer <- ""
          } in return buffer
        } else {
          buffer <- buffer+reader.readBlock($ExprLookup[BLOCK_READ_SIZE]$)
        }
      } else {
        return takeLine(newline)
      }
    }
    return ""
  }

  pastEnd () {
    return buffer.readSize() == 0 && reader.pastEnd()
  }

  @value findNewline () -> (Int)
  findNewline () {
    scoped {
      Int position <- 0
    } in while (position < buffer.readSize()) {
      Char c <- buffer.readPosition(position)
      // TODO: Maybe the line separator should be a factory argument.
      if (c == '\n' || c == '\r') {
        return position
      }
    } update {
      position <- position+1
    }
    return -1
  }

  @value takeLine (Int) -> (String)
  takeLine (position) {
    String data <- buffer.subSequence(0,position)
    buffer <- buffer.subSequence(position+1,buffer.readSize()-position-1)
    return data
  }
}
