/* -----------------------------------------------------------------------------
Copyright 2021 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

testcase "comparator helper tests" {
  success
}

unittest orderHLessThan {
  \ Testing.checkEquals<?>(("").defaultOrder()    `OrderH:lessThan<?>` ("").defaultOrder(),   false)
  \ Testing.checkEquals<?>(("a").defaultOrder()   `OrderH:lessThan<?>` ("abc").defaultOrder(),true)
  \ Testing.checkEquals<?>(("b").defaultOrder()   `OrderH:lessThan<?>` ("abc").defaultOrder(),false)
  \ Testing.checkEquals<?>(("abc").defaultOrder() `OrderH:lessThan<?>` ("abc").defaultOrder(),false)
  \ Testing.checkEquals<?>(("abc").defaultOrder() `OrderH:lessThan<?>` ("a").defaultOrder(),  false)
  \ Testing.checkEquals<?>(("abc").defaultOrder() `OrderH:lessThan<?>` ("b").defaultOrder(),  true)
}

unittest orderHLessThanWith {
  \ Testing.checkEquals<?>(("").defaultOrder()    `OrderH:lessThanWith<?,Reversed<Char>>` ("").defaultOrder(),   false)
  \ Testing.checkEquals<?>(("a").defaultOrder()   `OrderH:lessThanWith<?,Reversed<Char>>` ("abc").defaultOrder(),true)
  \ Testing.checkEquals<?>(("b").defaultOrder()   `OrderH:lessThanWith<?,Reversed<Char>>` ("abc").defaultOrder(),true)
  \ Testing.checkEquals<?>(("abc").defaultOrder() `OrderH:lessThanWith<?,Reversed<Char>>` ("abc").defaultOrder(),false)
  \ Testing.checkEquals<?>(("abc").defaultOrder() `OrderH:lessThanWith<?,Reversed<Char>>` ("a").defaultOrder(),  false)
  \ Testing.checkEquals<?>(("abc").defaultOrder() `OrderH:lessThanWith<?,Reversed<Char>>` ("b").defaultOrder(),  false)
}

unittest orderHEquals {
  \ Testing.checkEquals<?>(("").defaultOrder()    `OrderH:equals<?>` ("").defaultOrder(),   true)
  \ Testing.checkEquals<?>(("a").defaultOrder()   `OrderH:equals<?>` ("abc").defaultOrder(),false)
  \ Testing.checkEquals<?>(("abc").defaultOrder() `OrderH:equals<?>` ("abc").defaultOrder(),true)
  \ Testing.checkEquals<?>(("abc").defaultOrder() `OrderH:equals<?>` ("a").defaultOrder(),  false)
}

unittest orderHEqualsWith {
  \ Testing.checkEquals<?>(("").defaultOrder()    `OrderH:equalsWith<?,IgnoreCase>` ("").defaultOrder(),   true)
  \ Testing.checkEquals<?>(("a").defaultOrder()   `OrderH:equalsWith<?,IgnoreCase>` ("ABC").defaultOrder(),false)
  \ Testing.checkEquals<?>(("abc").defaultOrder() `OrderH:equalsWith<?,IgnoreCase>` ("ABC").defaultOrder(),true)
  \ Testing.checkEquals<?>(("abc").defaultOrder() `OrderH:equalsWith<?,IgnoreCase>` ("DEF").defaultOrder(),false)
  \ Testing.checkEquals<?>(("abc").defaultOrder() `OrderH:equalsWith<?,IgnoreCase>` ("A").defaultOrder(),  false)
}

unittest readAtHLessThan {
  \ Testing.checkEquals<?>(""    `ReadAtH:lessThan<?>` "",   false)
  \ Testing.checkEquals<?>("a"   `ReadAtH:lessThan<?>` "abc",true)
  \ Testing.checkEquals<?>("b"   `ReadAtH:lessThan<?>` "abc",false)
  \ Testing.checkEquals<?>("abc" `ReadAtH:lessThan<?>` "abc",false)
  \ Testing.checkEquals<?>("abc" `ReadAtH:lessThan<?>` "a",  false)
  \ Testing.checkEquals<?>("abc" `ReadAtH:lessThan<?>` "b",  true)
}

unittest readAtHLessThanWith {
  \ Testing.checkEquals<?>(""    `ReadAtH:lessThanWith<?,Reversed<Char>>` "",   false)
  \ Testing.checkEquals<?>("a"   `ReadAtH:lessThanWith<?,Reversed<Char>>` "abc",true)
  \ Testing.checkEquals<?>("b"   `ReadAtH:lessThanWith<?,Reversed<Char>>` "abc",true)
  \ Testing.checkEquals<?>("abc" `ReadAtH:lessThanWith<?,Reversed<Char>>` "abc",false)
  \ Testing.checkEquals<?>("abc" `ReadAtH:lessThanWith<?,Reversed<Char>>` "a",  false)
  \ Testing.checkEquals<?>("abc" `ReadAtH:lessThanWith<?,Reversed<Char>>` "b",  false)
}

unittest readAtHEquals {
  \ Testing.checkEquals<?>(""    `ReadAtH:equals<?>` "",   true)
  \ Testing.checkEquals<?>("a"   `ReadAtH:equals<?>` "abc",false)
  \ Testing.checkEquals<?>("abc" `ReadAtH:equals<?>` "abc",true)
  \ Testing.checkEquals<?>("abc" `ReadAtH:equals<?>` "a",  false)
}

unittest readAtHEqualsWith {
  \ Testing.checkEquals<?>(""    `ReadAtH:equalsWith<?,IgnoreCase>` "",   true)
  \ Testing.checkEquals<?>("a"   `ReadAtH:equalsWith<?,IgnoreCase>` "ABC",false)
  \ Testing.checkEquals<?>("abc" `ReadAtH:equalsWith<?,IgnoreCase>` "ABC",true)
  \ Testing.checkEquals<?>("abc" `ReadAtH:equalsWith<?,IgnoreCase>` "DEF",false)
  \ Testing.checkEquals<?>("abc" `ReadAtH:equalsWith<?,IgnoreCase>` "a",  false)
}

concrete IgnoreCase {
  defines Equals<Char>
}

define IgnoreCase {
  equals (x,y) {
    return toLower(x) == toLower(y)
  }

  @type toLower (Char) -> (Char)
  toLower (c) {
    if (c >= 'A' && c <= 'Z') {
      return (c.asInt() - ('A').asInt() + ('a').asInt()).asChar()
    } else {
      return c
    }
  }
}

unittest reversed {
  \ Testing.checkEquals<?>(0 `Reversed<Int>.lessThan` 0,false)
  \ Testing.checkEquals<?>(0 `Reversed<Int>.lessThan` 1,false)
  \ Testing.checkEquals<?>(1 `Reversed<Int>.lessThan` 0,true)
}

unittest bySizeLessThan {
  \ Testing.checkEquals<?>(""   `BySize.lessThan` "",  false)
  \ Testing.checkEquals<?>("b"  `BySize.lessThan` "ac",true)
  \ Testing.checkEquals<?>("ac" `BySize.lessThan` "b", false)
  \ Testing.checkEquals<?>("a"  `BySize.lessThan` "b", false)
}

unittest bySizeEquals {
  \ Testing.checkEquals<?>(""   `BySize.equals` "",  true)
  \ Testing.checkEquals<?>("b"  `BySize.equals` "ac",false)
  \ Testing.checkEquals<?>("ac" `BySize.equals` "b", false)
  \ Testing.checkEquals<?>("a"  `BySize.equals` "b", true)
}

unittest alwaysEqualLessThan {
  \ Testing.checkEquals<?>(""   `AlwaysEqual.lessThan` "",  false)
  \ Testing.checkEquals<?>("b"  `AlwaysEqual.lessThan` "ac",false)
  \ Testing.checkEquals<?>("ac" `AlwaysEqual.lessThan` "b", false)
}

unittest alwaysEqualEquals {
  \ Testing.checkEquals<?>(""   `AlwaysEqual.equals` "",  true)
  \ Testing.checkEquals<?>("b"  `AlwaysEqual.equals` "ac",true)
  \ Testing.checkEquals<?>("ac" `AlwaysEqual.equals` "b", true)
  \ Testing.checkEquals<?>("a"  `AlwaysEqual.equals` "b", true)
}
