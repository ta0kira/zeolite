concrete MatchState {
  refines Formatted
  defines Equals<MatchState>

  @type matchFail     () -> (MatchState) // Matching has failed.
  @type matchContinue () -> (MatchState) // Matching must continue.
  @type matchComplete () -> (MatchState) // End of the pattern.
  @type matchBranch   () -> (MatchState) // Optional end of the pattern.
}

@value interface Matcher<#c|> {
  copyWithReset () -> (Matcher<#c>)
  matchesEmpty () -> (Bool)
  tryNextMatch (#c) -> (MatchState)
}

@value interface BranchingMatcher<#c|> {
  copyWithReset () -> (BranchingMatcher<#c>)
  matchesEmpty () -> (Bool)
  tryNextMatch (#c) -> (MatchState)
  getBranch () -> (optional BranchingMatcher<#c>)
}

concrete MatchSingle<#c> {
  #c defines Equals<#c>

  refines Matcher<#c>

  @type create (#c) -> (MatchSingle<#c>)
  @value copyWithReset () -> (MatchSingle<#c>)
}

concrete MatchRange<#c> {
  #c defines LessThan<#c>

  refines Matcher<#c>

  @type create (#c,#c) -> (MatchRange<#c>)
  @value copyWithReset () -> (MatchRange<#c>)
}

concrete MatchAny<#c|> {
  refines Matcher<#c>

  @type create () -> (MatchAny<#c>)
  @value copyWithReset () -> (MatchAny<#c>)
}

concrete RepeatMatcher<#c> {
  refines Matcher<#c>

  @type createZeroPlus (Matcher<#c>) -> (RepeatMatcher<#c>)
  @type createOnePlus (Matcher<#c>) -> (RepeatMatcher<#c>)
  @type createRange (Int,Int,Matcher<#c>) -> (RepeatMatcher<#c>)
  @value copyWithReset () -> (RepeatMatcher<#c>)
}

concrete SequenceMatcher<#c> {
  refines Matcher<#c>
  refines BranchingMatcher<#c>

  @type create (optional ReadSequence<Matcher<#c>>) -> (SequenceMatcher<#c>)
  @value copyWithReset () -> (SequenceMatcher<#c>)
  @value matchesEmpty () -> (Bool)
  @value tryNextMatch (#c) -> (MatchState)
  @value getBranch () -> (optional SequenceMatcher<#c>)
}

@value interface ReadSequence<|#c> {
  value () -> (#c)
  next () -> (optional ReadSequence<#c>)
}

concrete LinkedNode<#x> {
  refines ReadSequence<#x>

  @type create (#x,optional ReadSequence<#x>) -> (ReadSequence<#x>)
}
