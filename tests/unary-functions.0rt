/* -----------------------------------------------------------------------------
Copyright 2020 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

testcase "category unary" {
  success
}

unittest test {
  Int value <- `Test:neg` 2
  if (value != -2) {
    fail(value)
  }
}

concrete Test {
  @category neg (Int) -> (Int)
}

define Test {
  neg (x) {
    return -x
  }
}


testcase "type unary" {
  success
}

unittest test {
  Int value <- `Test.neg` 2
  if (value != -2) {
    fail(value)
  }
}

concrete Test {
  @type neg (Int) -> (Int)
}

define Test {
  neg (x) {
    return -x
  }
}


testcase "value unary" {
  success
}

unittest test {
  Int value <- `Arithmetic.create().neg` 2
  if (value != -2) {
    fail(value)
  }
}

concrete Arithmetic {
  @type create () -> (Arithmetic)
  @value neg (Int) -> (Int)
}

define Arithmetic {
  create () {
    return Arithmetic{ }
  }

  neg (x) {
    return -x
  }
}


testcase "unqualified unary" {
  success
}

unittest test {
  \ Test.run()
}

define Test {
  @type neg (Int) -> (Int)
  neg (x) {
    return -x
  }

  run () {
    Int value <- `neg` 2
    if (value != -2) {
      fail(value)
    }
  }
}

concrete Test {
  @type run () -> ()
}


testcase "unary function with infix function" {
  success
}

unittest test {
  Int value <- 1 `Test:add` `Test:neg` 2
  if (value != -1) {
    fail(value)
  }
}

concrete Test {
  @category add (Int,Int) -> (Int)
  @category neg (Int) -> (Int)
}

define Test {
  add (x,y) {
    return x + y
  }

  neg (x) {
    return -x
  }
}
