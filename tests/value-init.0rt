/* -----------------------------------------------------------------------------
Copyright 2020 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

testcase "value init in @category member" {
  success
}

unittest test {
  \ Test.run()
}

concrete Test {
  @type run () -> ()
}

define Test {
  @value Int value
  @category Test singleton <- Test{ 3 }

  @value get () -> (Int)
  get () {
    return value
  }

  run () {
  }
}


testcase "init value same type from @type" {
  success
}

unittest test {
  Value<Int> value <- Value<Int>.create(1)
  if (value.get() != 1) {
    fail("Failed")
  }
}

concrete Value<#x> {
  @type create (#x) -> (Value<#x>)
  @value get () -> (#x)
}

define Value {
  @value #x value

  create (val) {
    return Value<#x>{ val }
  }

  get () {
    return value
  }
}


testcase "init value different type from @type" {
  success
}

unittest test {
  Value<Int> value <- Value<String>.create<Int>(1)
  if (value.get() != 1) {
    fail("Failed")
  }
}

concrete Value<#x> {
  @type create<#y> (#y) -> (Value<#y>)
  @value get () -> (#x)
}

define Value {
  @value #x value

  create (val) {
    return Value<#y>{ val }
  }

  get () {
    return value
  }
}


testcase "init value same type from @value" {
  success
}

unittest test {
  Value<Int> value <- Value<Int>.create(2).create2(1)
  if (value.get() != 1) {
    fail("Failed")
  }
}

concrete Value<#x> {
  @type create (#x) -> (Value<#x>)
  @value create2 (#x) -> (Value<#x>)
  @value get () -> (#x)
}

define Value {
  @value #x value

  create (val) {
    return Value<#x>{ val }
  }

  create2 (val) {
    return Value<#x>{ val }
  }

  get () {
    return value
  }
}


testcase "init value different type from @value" {
  success
}

unittest test {
  Value<Int> value <- Value<String>.create("x").create2<Int>(1)
  if (value.get() != 1) {
    fail("Failed")
  }
}

concrete Value<#x> {
  @type create (#x) -> (Value<#x>)
  @value create2<#y> (#y) -> (Value<#y>)
  @value get () -> (#x)
}

define Value {
  @value #x value

  create (val) {
    return Value<#x>{ val }
  }

  create2 (val) {
    return Value<#y>{ val }
  }

  get () {
    return value
  }
}
