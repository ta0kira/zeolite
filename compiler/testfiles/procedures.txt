testFunction1 (a,b,c) (d,e,f) {
  if (T$f()) {
    // do nothing
  } elif (`q$r().f()) {
    ~ require(v).g()
  } elif (zzz) {
    // sleep
  }

  x = Type<`z,T<`m>>{
      v: r
      qq: Type$new()
    }

  x = empty

  scoped {
    optional T myvar = reduce<`x,`y>(q)
  } in if (present(myvar)) {
    ~ unqualified()
  } else {
    // something
  }

  scoped {
    optional T myvar = reduce<`x,`y>(q)
  } in { v, _ } = x.process(myvar)

  scoped {
    // ...
  } in ~ x.process()

  ~ z.call().call()
  { x, weak (`k|Type) y, _ } = z.call()
  x = z.T<`z>$call().call()
  return
  return a
  return { a, z.call().call(), c }

  while (true) {
    ~ fail.to().execute()
    return x
  }
}

testFunction2 (a,b,c) {}
