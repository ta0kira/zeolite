testFunction1 (a,b,c) (d,e,f) {
  z.call().call();
  { x, Type y, _ } = z.call();
  x = z.T<`z>.call();
  return;
  return a;
  return { a, z.call().call(), c };

  if (T$f()) {
    // do nothing
  } elif (`q$r().f()) {
    require(v).g();
  } elif (zzz) {
    // sleep
  }

  x = Type<`z,T<`m>>{
      v: r
      qq: Type$new()
    };

  scoped {
    optional T myvar = reduce<`x,`y>(q);
  } in if (present(myvar)) {
    unqualified();
  } else {
    // something
  }

  scoped {
    optional T myvar = reduce<`x,`y>(q);
  } in { v, _ } = x.process(myvar);

  while (true) {
    fail.to().execute();
    return x;
  }
}

testFunction2 (a,b,c) {}
