/* -----------------------------------------------------------------------------
Copyright 2022 Kevin P. Barry

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
----------------------------------------------------------------------------- */

// Author: Kevin P. Barry [ta0kira@gmail.com]

$ModuleOnly$
$TestsOnly$

@value interface Message {
  asMessage () -> (Pointer<Message>)
}

// NOTE: Inheriting Message doesn't matter for the purposes of Pointer; it's
// just an arbitrary substitution for type checking.

concrete Request {
  refines Formatted
  refines Message

  @type create (String) -> (#self)
  @type getData (Pointer<Request>) -> (String)
  @value asRequest () -> (Pointer<Request>)
}

concrete Response {
  refines Formatted
  refines Message

  @type create (String) -> (#self)
  @type getData (Pointer<Response>) -> (String)
  @value asResponse () -> (Pointer<Response>)
}

concrete Service {
  @type send (Pointer<Request>, Pointer<Response>) -> ()
  @type send2 (Pointer<Message>, Pointer<Response>) -> ()
}
