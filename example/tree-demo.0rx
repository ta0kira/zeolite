concrete Main {
  defines Runner
}

define Main {
  @category TypeKey<Int>    one   <- TypeKey<Int>$new()
  @category TypeKey<Int>    two   <- TypeKey<Int>$new()
  @category TypeKey<String> three <- TypeKey<String>$new()
  @category TypeKey<String> four  <- TypeKey<String>$new()
  @category TypeKey<Float>  five  <- TypeKey<Float>$new()

  run () {
    TypeTree tree <- TypeTree$new()
    ~ tree
        .set<Int>(one,1)
        .set<Int>(two,2)
        .set<String>(three,"a")
        .set<String>(four,"b")

    ~ check<Int>(tree,one)
    ~ check<Int>(tree,two)
    ~ check<String>(tree,three)
    ~ check<String>(tree,four)
    ~ check<Float>(tree,five)
  }

  @category check<#x>
    #x requires Formatted
  (TypeTree,TypeKey<#x>) -> ()

  check (tree,key) {
    scoped {
      optional #x value <- tree.get<#x>(key)
    } in if (present(value)) {
      ~ LazyStream<String>$new()
          .append("Found '")
          .append(require(value).formatted())
          .append("'\n")
          .writeTo(SimpleOutput$stderr())
    } else {
      ~ LazyStream<String>$new()
          .append("Not Found\n")
          .writeTo(SimpleOutput$stderr())
    }
  }
}
