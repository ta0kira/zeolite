concrete RegexDemo {
  defines Runner
}

define RegexDemo {
  run () {
    ~ RegexTest$runTests()

    ~ testMatch("","",true)
    ~ testMatch("","a",false)
    ~ testMatch(".","a",true)
    ~ testMatch(".","aa",false)
    ~ testMatch("a",".",false)
    ~ testMatch(".+","",false)
    ~ testMatch(".+","ab",true)
    ~ testMatch("(ab)*","",true)
    ~ testMatch("(ab)*","abab",true)
    ~ testMatch("(ab)*","a",false)
    ~ testMatch("(ab)*ac","abac",true)
    ~ testMatch("(ab)*ac","ac",true)
    ~ testMatch("(ab)*ac","aca",false)
    ~ testMatch("(ab)*ac","acab",false)
    ~ testMatch("(ab)*|ac","abab",true)
    ~ testMatch("(ab)*|ac","ac",true)
    ~ testMatch("(ab)*|ac","acac",false)
    ~ testMatch("(ab)*|ac","abac",false)
    ~ testMatch("a{2}","a",false)
    ~ testMatch("a{2}","aa",true)
    ~ testMatch("a{2}","aaa",false)
    ~ testMatch("a{2,3}","a",false)
    ~ testMatch("a{2,3}","aa",true)
    ~ testMatch("a{2,3}","aaa",true)
    ~ testMatch("a{2,3}","aaaa",false)
    ~ testMatch("[a-z?]","q",true)
    ~ testMatch("[a-z?]","-",false)
    ~ testMatch("[a-z?]","?",true)
    ~ testMatch("[a-z?]*","abcde?",true)
    ~ testMatch("[a-z?]*","ab-cde",false)
  }

  @type testMatch (String,String,Bool) -> ()
  testMatch (pattern,data,expected) {
    MatcherTemplate<Char> template <- require(CharRegex$parse(pattern))
    LazyStream<Formatted> summary <-
        LazyStream<Formatted>$new()
            .append("regex: \"")
            .append(pattern)
            .append("\" data: \"")
            .append(data)
            .append("\" -> ")
            .append(expected)
    if (CharRegex$match(template,data) == expected) {
      ~ summary.append("\n").writeTo(SimpleOutput$stderr())
    } else {
      ~ summary.writeTo(SimpleOutput$error())
    }
  }
}
